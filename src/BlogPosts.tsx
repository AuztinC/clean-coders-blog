const blogPosts = [
  {title: "Day One - Blast Off!",
    blog: "\tThis is my first blog post. Today I learned about a lot of tools that I will use to be successful at Clean Coders. Tuple, CC-Epic, and CC-Poker. I used Tuple to partner with my mentor Alex where we discussed the process of estimating jobs and features.\n\n\tAfter deploying this blog site, I will proceed to setup the environment on the Mac Mini that he has provided me as well as watch the first video if time permits! The Mac Mini is set up with the proper environment for the clojure koans and the first few koans are complete.",
    date: "4-1-2025",
  },
  {title: "Day Two - Diving in",
    blog: "\tKoans! Today I did Koans 7 - 20. Going back through the Koans a second time has been a great refresher. I got stuck on a couple of the problems but proceeded to use the lein REPL to evaluate expressions and figure out my answers. Taking deeper dives into some of the key functions I learned the power of 'Let' to bind data structures to symbols. This is great way to destructure a datatype. 'Ref' will help us create a mutable object which I imagine could be great for managing things like state. ",
    date: "4-2-2025",
  },
  {title: "Day Three - Taking a closer look",
    blog: "\tThere is no shortage of information to be learned! After pushing through a couple of more Koans, I met with Alex J and understand some of the Koans I had earlier got to pass but didn't fully understand why. I now understand meta data a bit better, The ability to attach underlying data to an object. I found myself going into docs today to read more about some Clojure functions (seq vs sequence, meta, vary-meta, and more).\n\n\t Alex Root popped in to say welcome, which was very appreciated and made me feel like a part of the team even more! Macros are confusing. After spending some time trying to understand where I was going wrong I again asked for some help and got clarification on the 'recursive-infix' problem within macros. After restructuring the macro being create I was lead to find a further use for the 'drop' function as well as nthrest(the ability to take the end of a form starting at a certain index). \n\n\t Koans are complete although I will be scouring back through them in due time. Multimethods are very useful, similar to 'method overloading' in c#; This gives us the ability to have different outputs from the same function based on the inputing parameters.",
    date: "4-3-2025",
  },
  {title: "Day Four - A task for the Tin Man",
    blog: "\tHow would one go about grouping the frequency in which an element occurs within a given collection? ChatGPT thought this would be a great practice lesson for me to solve, so I dove right in. While trying to use my wits and ability to problem solve, I came up with a conclusion that I thought was genius! \n\n\t 'Using Reduce and Assoc I can see if each element exists within the accumulator and update that keys value with Inc. This process took my a while of looking through docs and trying different map functions like Update.' This is when Alex jumped in to kick off the Euler project, and after showing him my progress he was happy to lead me to a function in the docs called Frequencies!.. This function is amazing for this exact task! \n\n\t The process of building the frequencies function is still an important one to understand, though, and so I am excited to be able to build functions like these from scratch. \n\n\t Euler 1 began with me having to fully understand Modulo(the Quotient of the init value by the given Mod), which I had only used briefly in the past to check for odd or even numbers. After helping me understand this concept fully, Alex lead me through my first use of TDD. We wrote some practice tests that helped with the Modulo practice before we took a break for Lunch and Learn. After games with the team, I went back to finish this Euler alone as Alex had become busy. Solving this problem felt really great! I found Kristi in the clubhouse and got great help from her on how to submit my answers for Eulers and also getting the next problem started. \n\n\t Towards the end of the day, Alex suggested that I might begin watching through the videos, and so I finished the first video as well as exam. \n\n\t It was a fantastic first week working with the Clean Coders team! I have been made to feel like a part of the team right away and I am grateful for that. ",
    date: "4-4-2025",
  },
  {title: "Figuring it out",
      blog: "\tThe ability to precisely and accurately manage data within maps and vectors is slowly becoming more clear. The problem of grouping-frequencies was stepped up by the sum of the fibonacci sequence, followed by the largest prime factor of what might be the biggest number I've ever seen. Starting, I got some base case tests and examples of loop vs having a function call itself in the stack from Alex. \n\n\t Using some powerful wizardry called recursion with a loop to set our collection and add to it while using fancy tools like last and butlast to get our last two numbers in the collection. Once these two numbers are added the result can be compared with our incoming 'n' value to see if we have reached our max value where it is ultimately filtered for the even numbers and then reduced with +. \n\n\t The largest prime factor; sweet and simple, right? I started this problem alone and was slightly nervous about that. Choosing to separate out my functions, I began with factors alone. Base case is the game, get something running. After getting a simple 2 to pass through and struggling to gain movement forward. Eventually I stumbled upon a winning result, using a range to our n value and filtering any (mod n incrementing-number) that equal zero?; we get our factors which we can then run through the prime? function to filter any prime numbers. Both of these functions had to be refactored by using Math/sqrt n on our respective ranges. \n\n\t Ending the day; I completed episode 2 and 3 of the clean coders videos. Also completing two more ChatGPT practice problems, the group-by-fn, finishing filter-duplicates, and a quick flip-map. Big day, many more to come.",
      date: "4-7-2025"},

  
]

export default blogPosts

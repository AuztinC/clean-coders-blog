const blogPosts = [
  {title: "Day One - Blast Off!",
    blog: "\tThis is my first blog post. Today I learned about a lot of tools that I will use to be successful at Clean Coders. Tuple, CC-Epic, and CC-Poker. I used Tuple to partner with my mentor Alex where we discussed the process of estimating jobs and features.\n\n\tAfter deploying this blog site, I will proceed to setup the environment on the Mac Mini that he has provided me as well as watch the first video if time permits! The Mac Mini is set up with the proper environment for the clojure koans and the first few koans are complete.",
    date: "4-1-2025"
  },
  {title: "Day Two - Diving in",
    blog: "\tKoans! Today I did Koans 7 - 20. Going back through the Koans a second time has been a great refresher. I got stuck on a couple of the problems but proceeded to use the lein REPL to evaluate expressions and figure out my answers. Taking deeper dives into some of the key functions I learned the power of 'Let' to bind data structures to symbols. This is great way to destructure a datatype. 'Ref' will help us create a mutable object which I imagine could be great for managing things like state. ",
    date: "4-2-2025"
  },
  {title: "Day Three - Taking a closer look",
    blog: "\tThere is no shortage of information to be learned! After pushing through a couple of more Koans, I met with Alex J and understand some of the Koans I had earlier got to pass but didn't fully understand why. I now understand meta data a bit better, The ability to attach underlying data to an object. I found myself going into docs today to read more about some Clojure functions (seq vs sequence, meta, vary-meta, and more).\n\n\t Alex Root popped in to say welcome, which was very appreciated and made me feel like a part of the team even more! Macros are confusing. After spending some time trying to understand where I was going wrong I again asked for some help and got clarification on the 'recursive-infix' problem within macros. After restructuring the macro being create I was lead to find a further use for the 'drop' function as well as nthrest(the ability to take the end of a form starting at a certain index). \n\n\t Koans are complete although I will be scouring back through them in due time. Multimethods are very useful, similar to 'method overloading' in c#; This gives us the ability to have different outputs from the same function based on the inputing parameters.",
    date: "4-3-2025"
  },
  {title: "Day Four - A task for the Tin Man",
    blog: "\tHow would one go about grouping the frequency in which an element occurs within a given collection? ChatGPT thought this would be a great practice lesson for me to solve, so I dove right in. While trying to use my wits and ability to problem solve, I came up with a conclusion that I thought was genius! \n\n\t 'Using Reduce and Assoc I can see if each element exists within the accumulator and update that keys value with Inc. This process took my a while of looking through docs and trying different map functions like Update.' This is when Alex jumped in to kick off the Euler project, and after showing him my progress he was happy to lead me to a function in the docs called Frequencies!.. This function is amazing for this exact task! \n\n\t The process of building the frequencies function is still an important one to understand, though, and so I am excited to be able to build functions like these from scratch. \n\n\t Euler 1 began with me having to fully understand Modulo(the Quotient of the init value by the given Mod), which I had only used briefly in the past to check for odd or even numbers. After helping me understand this concept fully, Alex lead me through my first use of TDD. We wrote some practice tests that helped with the Modulo practice before we took a break for Lunch and Learn. After games with the team, I went back to finish this Euler alone as Alex had become busy. Solving this problem felt really great! I found Kristi in the clubhouse and got great help from her on how to submit my answers for Eulers and also getting the next problem started. \n\n\t Towards the end of the day, Alex suggested that I might begin watching through the videos, and so I finished the first video as well as exam. \n\n\t It was a fantastic first week working with the Clean Coders team! I have been made to feel like a part of the team right away and I am grateful for that. ",
    date: "4-4-2025"
  },
  {title: "Figuring it out",
      blog: "\tThe ability to precisely and accurately manage data within maps and vectors is slowly becoming more clear. The problem of grouping-frequencies was stepped up by the sum of the fibonacci sequence, followed by the largest prime factor of what might be the biggest number I've ever seen. Starting, I got some base case tests and examples of loop vs having a function call itself in the stack from Alex. \n\n\t Using some powerful wizardry called recursion with a loop to set our collection and add to it while using fancy tools like last and butlast to get our last two numbers in the collection. Once these two numbers are added the result can be compared with our incoming 'n' value to see if we have reached our max value where it is ultimately filtered for the even numbers and then reduced with +. \n\n\t The largest prime factor; sweet and simple, right? I started this problem alone and was slightly nervous about that. Choosing to separate out my functions, I began with factors alone. Base case is the game, get something running. After getting a simple 2 to pass through and struggling to gain movement forward. Eventually I stumbled upon a winning result, using a range to our n value and filtering any (mod n incrementing-number) that equal zero?; we get our factors which we can then run through the prime? function to filter any prime numbers. Both of these functions had to be refactored by using Math/sqrt n on our respective ranges. \n\n\t Ending the day; I completed episode 2 and 3 of the clean coders videos. Also completing two more ChatGPT practice problems, the group-by-fn, finishing filter-duplicates, and a quick flip-map. Big day, many more to come.",
      date: "4-7-2025"
  },
  {title: "A day with Uncle Bob",
      blog: "\t Function names matter, and should be no longer than around 4 lines. Something I have felt myself wondering in the past, have my function names been descriptive enough? Probably not, when I reflect back and think about some of the projects where I was in a hurry to get my idea out and didn't want to be slowed down by writing out long names that would have helped anyone ready my code if ever they chose to. Even I myself would have benefited from this simply by knowing that I could go back and immediately understand what I was trying to accomplish within a function. \n\n\t Uncle Bob doesn't much care for comments. The idea is a sound one, your code should speak for itself and when someone reads it, there should not be a confusion based on function and variable names, and the flow of logic. Using white-space properly is something I have tried to keep consistent throughout my projects. Using only 1 space is Bob's convention, which I think is a reasonable one. \n\n\t Avoiding temporal coupling by passing a block. Tell, don't ask, as to avoid long chain calls from functions that should be seperated out. Keeping a file at around 60 lines of code and at most 100 to 120 to ensure clear intent and workflow. These and so many other concepts today really gave me a lot to think about when I'm writing my next lines of code. \n\n\t All of this learning, and getting to watch Uncle Bob do clean-up on these projects and complete the stack kata was a great bonus for todays lessons.",
      date: "4-8-2025"
  },
  {title: "If you plan it, they will meet.",
      blog: "\t Today was my first iterative planning meeting or IPM. I am happy to have a better understanding of what my weekly duties will be at least at this current level of the apprenticeship. Having to estimate is very hard and can be intimidating while doing so in front of multiple people. A feeling I will have to overcome and get confident in answering. The first week I feel I ended fairly strong. I will be proud, but aware that harder tasks are coming. \n\n\t My first task became retaking some of the exams for the videos. While not being directly given a strict goal, I should have not had to go back to fix anything. That task is nearly complete already having only one more exam to fix in the morning first thing. I am actually glad I had to go back though becuase it gave me another opportunity to absorb the information in the videos. Getting to refresh things like how to remove switch statements from your code using polymorphic dispatch and create less dependancy issues due to fan-out, a little bit about Functional and Structured programming and what they are used for, and many other great lessons. \n\n\t Tomorrow I am excited to finish off the previous exams and get started on the TDD videos after I complete the FizzBuzz Kata for the first time. Having to 'Live Perform' the kata is an interested and sort of scary one for me. However, Micah is right in that I should be so confident by a week of completing the task multiple times daily that it should be no problem to talk it out and explain each step in detail. \n\n\t Thrilled to be an apprentice, learning from some really smart and helpful people. ",
      date: "4-9-2025"
  },
  {title: "The Legend Himself",
    blog: "\t The first Kata I was assigned was a fun challenge. The ability to print a string with 'fizz' and 'buzz' at every 3 and 5 multiple, and 'fizzbuzz' if the number is both. I succefully completed it twice today while still managing to go through some old exams as well as complete the first TDD video. Fizzbuzz is a good first challenge for a cata. A problem that allowed me to use something new, both 'doseq' and 'cond'. Using cond we are able to check if an incoming number will be a multiple of 3, 5, or both. This is accomplished using Mod which I have been getting more comfortable with these past few days. \n\n\t Begenning by seperating out the functionality of the question; I created a function to handle each number individually to check for 'fizz' 'buzz' or 'fizzbuzz'. This is the function using Mod to check for divisibility. Next the function for outputting a list of numbers with the strings was created. This function mapped a range of 1 to the (inc c) to allow each number to feed into fizzbuzz and return their value as a list. Finally the function to print the string is created, this function uses a doseq to println the result of each value of fizzbuzz-upto. \n\n\t I'm eager to master the process of TDD and know what to be testing for and when. The repitition of the Kata is a fantastic way to get me used to writing them so I look forward to that comfort. \n\n\t Getting to watch a presentation live from Uncle Bob was really a special treat for the day. His ability to relate things and tie topics together is very inpspiring for my future presentations. Learning about the human body a bit was a great break during my day, and a great refresher for my science knowledgebase. \n\n\t Watching Alex present about TDD and go over some concept projects was also great! A good way to see some realistic case studies of projects and the way the tests are used for the current craftsmen. Grateful for another day of apprenticeship.",
    date: "4-10-2025"
  },
  {title: "Repition, young grasshopper",
    blog: "\t Fizzbuzz is definitely on the brain. It is a fun challenge that I like to totally erase from memory before attempting again if possible. I am able to think the problem through and make my way through each test successfully. Knowing what you want out of a function ahead of time can make the process of testing feel a little redundent, but once you have them in place it is nice to not wonder if the function will break. From using terminal to create the project and open IntelliJ to printing out the final output with lein run -m, I am getting confident in the process. \n\n\t I am happy to have the repitition as a task. While I have been doing practice problems on my own, it helps to a reason to make the project, use the tools, run the tests and commands. After watching and completing another couple videos and exams I am becoming a more well equipped designer and developer. Many lessons that included information like Architecture and the importance of laying out the foundation of a software system, Developing apps driven by independent use-cases, and the disgust of design smells due to fragility, rigidity, and needless complexity. These and many others today involving the importance of interface segregation, the Single Use Principle, and the Dependancy Inversion Principle are huge take-aways for me today. I will be studying these lessons before designing my next system.",
    date: "4-11-2025"
  },
  {title: "Racecar, Level, Rotor, Oh My!",
    blog: "\t Using the knowledge I have gained through the videos and my Mentor thus far. I was able to successfully use Test-Driven Development strategies and solve the problem. The question of 'What is the largest palindrome of two three digit numbers?' was not answered without a set of challenges. \n\n\t Going into the problem I knew I wanted to seperate the operations to build to my final answer. Beginning with a simple function to find the product. Once the numbers are multiplied, they need to be seperated out so that they can be compared to one another. I solved this with a function that splits a string version of the numbers into a vector. \n\n\t Now I have a collection something like ['9' '0' '0' '9'], and with this I will need to determine the amount of numbers in the collection to know where I should split it correctly. A cond with a 4, 5, and 6 variation of a collection with two subvectors, reversing the second half to compare and check for a match with the first. \n\n\t Next a simple function checks if every subvector is matching in our collection using every? true? over our subvec-coll. Thus bringing us to our final step, the grand finale. I was feelng good with my progress after working through a loop that will recursively dec the first int in the num-col before sending it off to get processed and match-checked. This resulted in a green light from my two digit test case, expecting and achieving my result of 9009 from the product of 91 x 99. \n\n\t However. This process did not continue to produce the results I expected when I stepped the function up to a two digit number. I was, after all, looking for the largest product of a three digit number, not two! And so, began my testing. I first had to improve my ability to process the string splitting and reversing which could at first only handle a 4 digit number, due to my expected results of the two digit outcome. \n\n\t In the end, a double nested for loop was used to create essentially a couple countdown timers and a max(outer) and local(inner) palindrome to compare with. Down in the depths we recurse over the inner countdown doing palindrome checks all along the way, and updating our local-max-palindrome. Once the timer is out for both we will result in an output format of [[993 913] 906609]",
    date: "4-14-2025"
  },
  {title: "Re-factor",
    blog: "\t What makes something solid? The ability to resist change from outside forces? Maybe something that is independent and can stand alone or can be relied upon? Well, these seem like good values to instil in the design of our applications, don't they? The SOLID principles help define a design structure that if used will certainly help you get close to having most if not all parts of your application following these and many other great values. \n\n\t Single Responsibility, or the principle that states that each module you build should have one and only one responsibility, and it should do that well. This is a fantastic way to build modules. By keeping all modules small and easy to understand we can decouple complicated logic and remove the overflow of un-needed resources or un-called functions. This principle alone leads you to an easy path to conforming to the Interface Segregation principle. \n\n\t Open-Closed Principle, the rule that asks that your modules each have only the ability to be extended and not modified. When you are building modules that follow this principle, your modules behavior should be easy to change, while the source code of that module should not need modification. When you add a new feature to a system you should only have to add new code to the project, not go in and modify much of the existing source code. Building a system that isn't following this rule must be a real challenge. \n\n\t Barbara Liskov wrote us a great list of rules that were later coined by Alan Coplien as the Liskov Substitution Principle. The idea that a subtype in a system should be able to be substituded in place of its parent and produce the same outcome. Any class that we extend from another should be able to sit in place of the original. If a base clase does something, any derivitive should do that also. Any derived class should be able to do more than the base class and not less. \n\n\t The Interface Segregation Principle tells us that a class should not be forced to implement interfaces it does not need. This is huge for keeping a system decoupled and less cluttered overall. \n\n\t Details should depend on high level policies while high level policies should never depends on the details of a system. The Dependency Inversion Principl separates extensible behavior behind abstract interface and then turn the dependancies around. This keeps us abstracting our policies out from the main applicaion and keeps business logic seperate from low level details. \n\n\t After two hours of refactoring with Alex today, my Euler 4 or the fizzbuzz project code is looking WAY cleaner. The names, functions, tests are all improved! It was an extremely enlightening to see the power of some of clojures built in functins like for. I was shocked to see the simplicity of a recuring double for loops inside of a simple binding expression and printout. Changing names to be somehow what seems to be more simple and also descriptive was another take-away that I will keep with me. \n\n\t A ton of lessons today and I'm happy to be getting them. Another great day of being an apprentice!",
    date: "4-15-2025"
  },
    {
    title: "Buckle Down",
    blog: "\t Performing the fizzbuzz today during my first real IPM check in was a fun and helpful experience overall. I am happy to be receiving such great feedback from developers as talented as the ones here at Clean Coders. Running through the problem at such a fast pace during my practice unfortunately turned out to be a mistake. This habit carried into the performance that I did today and I can understand my appearing to be rushing. My takeaway from the experience is that I need to slow down sometimes. Even if I know what the next step is, maybe there is an alternative to solving the problem in a quicker or more convenient way that I just hadn’t considered in the moment. \n\n\t Doing my estimates made me a little bit nervous my ability to properly estimate. This is the time to learn what I am capable of, though. Once the process of estimating my stories for the week was over, I jumped right into a presentation on the Single Responsibility Principle. \n\n\t Finishing the day I completed two more Euler’s, putting me at the 7th. I am proud of that progress as I went into both problems unsure how to get the answers. Now, to keep the momentum throughout this week and make sure I’m taking the time to adjust the small things that the feedback has made me aware of in my code.",
    date: "4-16-2025"
  },
  {
    title: "Rehearse the verse",
    blog: "\t During my rehearsing today I decided to grab a prop and bring my past experiences into the presentation. I'm excited to share some laughs with the team and get to play a game after as well. After rehearsing a few times I went over some previous euler problems that I have completed as a refresher. I am proud of the work I have done so far, the progress with clojure has been tough and I know there will be other hard challenges and concepts to grasp. Completing euler 8 today put me on cloud nine for a bit, it felt like a problem I was ready for because of the method in which I solved a previous euler was very similar. \n\n\t Finding the 10,001st prime number was the challenge. I set off with an empty test suite and a full stomach. First, I needed a function to check for prime numbers, and so it was done. Using a range starting from 2, I started the pointer at 3 to begin the checking. Using a function that passed the current number to check and also the collection of previously recorded prime numbers, the checks were made rather quickly. Giving the input a max-depth of 10,001 I was able to achieve success and getting the prime in question. \n\n\t After a short break from the first euler, I dove into the second one of the day. Finding the 13 adjecent digits that had the greatest product, out of a 1000 digit number. This one was tricky at first, I was struggling to get the numbers broken into a collection, but still remain numbers. Stumbling through solutions, I found edn/read-string to be useful while maping over the collection of the numbers that are already split into individual strings. This gave me the number that I could then use in a loop with a pointer and max-product. Each iteration the function will drop up to the pointers number, take 13 from that position and calculate the product of them. This is compared to the previous max-product and replaced when needed. This solution works, but I am looking forward to going back and refactoring all of these problem's solutions. The IPM had me slightly nervous about my ability to complete everything, but I believe that I am making really great progress so far. \n\n\t Exciting day today solving problem and making my brain feel huge. A great feeling! ",
    date: "4-17-2025"
  },
  {
    title: "SRP",
    blog: "\t The morning went by quick! I have found myself getting very worried about the use of Clojure itself. Spending a lot of time on my euler projects and repeating the fizzbuzz kata, even after having performed it. Presenting at lunch and learn was exciting. It was fun to get to share some analogies that the single responsibility principle had made me think of. Diving into my examples I found it easy to talk about the similarities in them. After finishing I was happy to receive some feedback that these were examples some others had not previously though about. Having to present just after Kristi made me a bit more nervous, as her presentation was very nice and colorful and mine was, well not. Admittedly, I feel that presentations such as these are a big weak point for myself. I need to acknowledge that and make progress at becoming better. Next Time, I will ask for more help in the ideas and layout of a presentation. Gina's feedback was not taken lightly, after thinking a lot about what she said I do believe that she made a good point. The examples I gave did not illustrate the need to keep overall business/operations responsibilies as a whole, separated. \n\n\t After presenting and playing Fishbowl at the lunch and learn. I dove into euler #9, which was completed after recieving some advice about the wording of the problem itself. This problem has you find the 3 numbers that will add together to equal 1000 but are also a set of pythagorean triplet numbers. This was solved with a function that checks for pythagorean triplets on its own by taking in 3 numbers and comparing and calculating the algorithm. After this, a function 'test-triplets-under' was set up to make a nested loop with A, B, and C. A being the range to the incoming number. B, a range that starts above A and C which is the result of subtracting both A and B from the total incoming number. Resulting in a triple nested loop ensuring A is the smallest, B is second, and C is the largest of the three. \n\n\t Euler #10, finding the sum of all prime numbers below 2 million. This problem turned out to be rather easy, as a couple of the previous problems have dealth with prime numbers. Creating a function check for prime numbers, I then used a function that looped to the incoming depth number and conj all prime numbers along the way. To speed this up I was only going to the Sqrt of the number being checked and also passed the collection with all previous primes as a parameter to result in less numbers being checked.",
    date: "4-18-2025"
  },
  {
    title: "Iterate",
    blog: "\t Going back into old code is important at this stage I think. Taking a look at the koans again to re-visit some of the tougher concepts that I haven't yet used. Things that seem very important and I'm sure I will soon be utilizing, datatypes, macros, and multimethods. The koans are a great reference for these things and many more. I also spent time looking at my previous eulers and video notes. \n\n\t SOLID Components. Larger entities made up of many classes. This was a great lesson that did some re-iterating on the SOLID principles, as well as introduce some new concepts like Components, Subroutines, and Linkers. A Component is an independant deployable library. Subroutines vs Frameworks was illustrated by example saying that applications call subroutines, frameworks call applications. The historical evolution of linking. From slow linkers requiring a full rebuild to modern loaders capable of resolving references dynamically teaches why shared and dynamically linked libraries became less prominent as compilation techniques improved. The idea of navigating abstraction layers like a yo-yo encourages thoughtful layering and separation of concerns, starting from abstract actor-driven requirements and gradually descending into implementation specifics. \n\n\t Euler #11. Finding the 4 adjacent double digit numbers in any direction (left, right, up, down, diagonals). This was a much more intimidating problem on the surface. After getting the project open and dealing with the fact that the leading 0's will not be supported on numbers lke 08, I created a variable using a regex to remove them. Ultimately, this problem took a lot of testing and time thinking through my strategy. A strategy that I almost threw away before diving in. \n\n\t Using function for Horizontal, Vertical, Diagonal-up, and Diagonal-down, I am able to check the product of 4 positions ahead of a starting index and column (x, y). These are all set up very similarly in that they all find the proper column, drop to the starting index of that column, before reaching out in the proper direction and either taking 4 (horizontal) or incrementing or decrementing the column before starting the drop process over again. \n\n\t Now it was time to run a nested loop with all of these checks and using them to sort the output, giving me the largest product. This was a much larger project, code-wise than some of the previous eulers. I had a blast working through the problem and am thankful that Alex asked me to take on the challenge. \n\n\t Thankful to be solving problems with a great team!",
    date: "4-21-2025"
  },
     {
    title: "Zone of Pain ....or Uselessness?",
    blog: "\t What a phrase, the 'Zone of Pain'. But that's the life of a concrete component that carries many dependents. Such a place comes with many responsibilities, whereas the life of an abstract class or interface who no one depends upon. This opposition creates the ‘Zone of Uselessness’, which is not quite as fun to think about but equally important to understand. Today’s video information was packed full of new topics throughout the two major categories of Component Cohesion and Component Design. \n\n\t 'Avoid creating classes that depend on methods that they don't use. Avoid making components that depend on classes they don't use.' These two principles are eerily similar, are they not? The first pertaining to the Interface Segregation Principle and the second refering to the Common Reuse Principle. Both painting the same big picture in that you should not build a system with unused assets lying around wasting space. \n\n\t 'When someone changes something you depend upon. Make sure it hurts them more than it hurts you!' A beautifly spoken description of the Stable Dependency Principle by Uncle Bob. There was so much to take in today that I will certainly be revisiting my notes on these videos. \n\n\t After going through some previous eulers again as refreshers this morning I popped open OBS and recorded another fizzbuzz session. Test-Driven Development is a process that feels like is has swells of momentum. Using this idea when searching for the right song I happen to come accross a Beethoven symphony that I feel fit the rising and falling of the process. This was a fun project to set up and is now something I can watch myself and learn from. \n\n\t This was a fantastic week of being an apprentice. I knocked out so much that I really surprised myself. I'm feeling proud of the amount of work I accomplished, but I will not let that get over confident. There is so much ahead!",
    date: "4-22-2025"
  },
   {
    title: "Thrill rides",
    blog: "\t There is a moment that is so euphoric whenever a problem is solved through a new function or test is passed green. These are the moments that I strive for when coding, always learning a new way to do something. However, whenever the problem at hand is so close to being complete you can just smell it, and yet so far out of reach, this is an opposing feeling that we all dread I'm sure. Today I had that dreadful feeling, finding the highest divisible triangular number with over 500 divisors. \n\n\t Jumping into the problem and after stopping to think about all of the steps I might need to achieve this goal, I decided to start with counting how many divisors a number has. This was a simple process I thought and started out with a function that checks mod against a range all the way up to the number. Looking back I can easily see why this became an issue! Checking every number into the Millions becomes a costly afair, and this takes time. \n\n\t This problem was a simple concept that needed to be refactored after expanding my test numbers beyond the 100 divisors range.Eventually, after hours of thinking what I am missing and looking through how to increase the speed of a function using a range like this, I saw a hint about prime-factorization. This is a problem that seemed very simple, because I had done a prime-factor euler before, so, this should be a breeze. right? Well. Wanting to get a deeper understanding of what exactly prime-factorization even means, I went to Khan academy to gain some math skills. \n\n\t This was an interesting situation where I found myself with something that was working, just not to the extent that I needed. Realistically, I could have let my function run. Who knows how long it would have taken to reach the target number of 70 million and something. I'm happy to have learned the concept better, though. Learning like this can be painful in the moment, but usually results in a deeper understanding of the topic. \n\n\t Ready to take on Tic Tac Toe soon! Another great day of learning as an apprentice!",
    date: "4-23-2025"
  },
  {
    title: "Cracking the code",
    blog: "\t Who doesn't love the Roman's? They gave us so many great things like aquaducts, concrete, roads. But amazingly they also invented a number system that is really quite simple yet, elegant. Easy to understand and simple to write out. But how do we equate these to our numbers we use today? A problem I tackled today and learned some things along the way! \n\n\t This problem was fun to solve because so far in my problems I haven't had to use data from a map. Starting off, I went for a function that would calculate each number using a conditional and really thought I was on the right track for a minute there. Once I decided to test double digit numbers I quickly realized the error in my thinking. How would I calculate for subtractions with this method? It would have ended up much more complicated I believe, so I reset my thinking. What if I made a map and used it as a lookup table for the values of the incoming numerals! So I set off in this new direction which made finding the numbers easy. This was a promising result but I still had to solve the problem of, 'What if I need to subtract?'. Eventually after messing about in the code and trying various things, I wound up checking if the next index in the string's value is greater than the current value. This lead to a promising result, although in what felt like a messy way. I am proud to have solved this one and had fun learning the process. \n\n\t After completing the kata for the first time I decided to tackle the presentation for tomorrow's lunch and learn. Using my notes and going back into the video about the open-closed principle I came up with what I believe is a solid presentation showcasing the do's and do-not's of the principle itself. I am excited to get some feedback on the more traditional approach of presenting. \n\n\t A beautiful day of solving problems and growing my brain. I cannot wait to tackle tomorrow and make some bounds on tic-tac-toe!",
    date: "4-24-2025"
  },
  {
    title: "Learn and lunch",
    blog: "\t Exciting new challenges are heading my way! Digging deeper into tic-tac-toe has been a really fun and new way to look at clojure. I'm getting a lot of ideas on how to handle the state and am looking foward to having a finished project. The presentations today were really exciting! I feel like a received way better feedback than my first one, thats a great thing. Then getting to watch Nathan perform a rather exceptional kata was energizing. It made me want to get more confident in presenting things like that, I find myself rushing through the process where-as he really took his time. Following his performance, it was nice to see Nick's artistic passion really show today. I learned a bit about some art concepts that I hadn't heard be defined, but was such very nicely. \n\n\t Getting to have my mentor walk through his thought process about certain problems and ideas was also a great refresher of new ways to tackle problems. Getting to refactor eulers is really cool because it feels like my code just feels better after. I look forward to seeing my code start in these states! It was a great Friday and I plan on making progress on t-t-t a bit over the weekend if possible. ",
    date: "4-25-2025"
  },
    {
    title: "Minimax to the max!",
    blog: "\t Minimax is a fun algorithm that gets me thinking recursively about a problem. This time, I had to implement it in another language this time, having previously completed it in javascript. In my previous iterations of tic-tac-toe, I found myself using a 2-d array so that I could follow along with an 'x' and 'y'. This time I chose a single vector with each position being a vector itself carrying an empty string ['']. This could have been reduced again to just the str '' itself, however I wanted the extra brackets for the visuals in the termal ui. \n\n\t The game itself did indeed come together using the test-driven style. Starting off testing for a tie game to see if they are all filled and growing my tests to be specific to different parts of the minimax-ai solution, 'did someone make a winning move?', will the ai return a position? will that position be the current best position?' \n\n\t Accomplishing the task felt extremely gratifying, it was a problem that helped helped me grow a lot in iteration and recursion with clojure. I look forward to revisiting it and getting to refactor!",
    date: "4-28-2025"
  },
    {
    title: "Refactor, refactor!",
    blog: "\t Refactoring is all of the time, never ignore it. Never put it on a schedule. I need to recite this more often to myself as I am building out a solution. Follow the three laws of test-driven development, one: 'You're not allowed to write any production code until  you have a failing test.', two: 'Stop writing the test as soon as it fials, even if its a compiler error.', and finally 'Stop writing the production code as soon as the test passes.' These are essential to building out a solution incrementally without getting stuck in the mud. Play code golf and try to make a test pass with as few keystrokes as possible, have fun with the process. \n\n\t Getting to refactor with Alex has been eye-opening, yet again. As I am growing with clojure I am sure that these solutions will come to me easier, but as of now they are hard to see. When creating programs I need to search for more solutions that my typical javascript-way of doing things. Clojure can be clean and way more readable and I need to take advantage of that. \n\n\t Grateful to have gotten the help again today and thankful for my Mentor Alex!",
    date: "4-29-2025"
  },
    {
    title: "Getting the rythm",
    blog: "\t Coming out of my fifth Iterative meeting I am feeling more confident in my ability to complete tasks. I am working on my presentation for the Liskov Substitution Principle and am sort of struggling to come up with ideas that fully make sense for code examples. I want my presentations to have some sort of new way to visualize the problem at least and not just the same old examples that I'm sure all of the craftsman have seen from every new apprenctice. \n\n\t Getting to improve my tic-tac-toe is an exciting story for the week, I look forward to having a fully working game with playable options. I will need to work on my kata a lot tomorrow because I got so caught up in the presentation that I did not jump into that yet. Building minimax again in clojure was a challenge in itself, but now building upon that idea will be easier since I now have a much better grasp of using recursion in the language. \n\n\t Tomorrow I will work hard to complete this and at least two other tasks for my week. ",
    date: "4-30-2025"
  },
    {
    title: "Clean Tests",
    blog: "\t Testing a problem out is becoming a go to habit when looking at a problem now and that's great. When it comes to implementing these tests I am definitely in need of practice. The building of tests with multiple layers of set up functions is still a big concept for my tiny testing brain. But as Uncle Bob tells us, start small with a degenerate test and a problem to solve, incrementaly work you way towards the goal one green test at a time. \n\n\t Arrange, Act, Assert! Well, that was the way. Then along comes another A! Annihilate, or to destroy the left over effects of a test. I'm happy to learning more about the ideas of creating useful and modular testing and look forward to being a master at utilizing them. Using transient fresh fixtures whenever possible, and keeping teardowns to a minimum. ",
    date: "5-1-2025"
  },
    {
    title: "Liftoff with Liskov!",
    blog: "\t The Liskov substitution principle was for some odd reason what felt like an intimidating concept on the surface. Maybe it was just because there was two whole videos on the subject in the SOLID series with Uncle Bob. However once I had dug into the topic and got a fuller understanding on the idea did I come to see it for what it is. Making sure that all of your extensions from a type or class are fully committed to fulfilling to contract that it has taken on by extending off of the original class. Not breaking the expectation of what a system is expecting from a function. Being consistent with your types and returns. \n\n\t Bowling has become a much more comfortable process. A short program that consists of a few if statements and a loop to tally the score of a given list of rolls. The roll-many function that is used to test a given list of input vectors with rolls and pins got way over complicated my first go through. Trying to create a loop system looking through each vector and keeping track of things in a recursive way. After slowing down to consider the problem and what I really needed, I realized the repeat function that I used to initiate the first set of rolls (20 0) was the key! I could go through a list of vectors with a for loop and create sub sequences with the first amount of the second value, within each given vector. example being [[20 0]] would give us 20 0's, as before. But we can now enhance and build fuller games with this system such as [[15 1] [5 2]] can result in a game of 25 from adding fifteen 1's and five 2's. This can be fully utilized by flattening the output of the for and using this for score-game. \n\n\t Thankful for the help refactoring again today and look forward to showing projects where I have done the refactoring first, because I see those things while building it. A great day of presenting and getting feedback. Grateful for another week!",
    date: "5-2-2025"
  },
    {
      title: "Rodney Mullen Monday",
      blog: "\t My first week as a curator, and I am happy to have been chosen. Being the person who has to speak up in the meetings really helps me be more comfortable with the speaking in front of the team. The morning was a great time for me to decide what kind of week I wanted to have as a curator and what I would be talking about at the end of the meetings. Alex had been busy before the stand up meeting and so I spend time reviewing old katas and eulers and practicing the bowling kata. \n\n\t The rythm of the bowling kata is feeling good. I am happy to get to a point where I see a refactor in the making and am ready to pull out duplicate expressions. Bowling has been a great kata to help me learn to back up on red and refactor and that is a huge step. \n\n\t After meeting with Alex briefly followed by a short meet with Scoops I was left with the idea of 'how do I get all of these functions into one?'. The journey began with me writing the select-game function that would take in the user input and select the appropriate game accordingly. I was originally writing this with the intent to continue using the four seperate game mode loop functions. But after staring at the functions and looking at how much similarity there really is, I started trying to understand how to create a system so generic that it doesn't care who or what player1 or player2 is, it just allows them to play their turn. This ended up with me parameterizing all of the inputs such that I can feed the new 'init-game' function with something like (board [:human :ai] ['X' 'O']) and allow the function to handle the setup of players and markers. This was a great lesson in thinking more generic and abstract. I'm happy with this update as it shows a big step in those fields. \n\n\t Another awesome Monday, looking forward to my next project!",
    date: "5-5-2025"
  },
    {
    title: "Rinse, Repeat",
    blog: "\t The power of repetition is so powerful that will shape habits and influence behavior. A daily reminder to think a certain way. This thought keeps me scouring my notes daily from previous videos, and looking over my euler problems to get back into the headspace of the problems. Rewatching the Interface Segregation video today was great and helped solidify the principle. Being forced to carry extra baggage is never a fun experience, why would we let our code have that experience? Avoiding this will help prevent the inevitable violation of the Liskov Substitution principle as well, and then we begin the dominos. \n\n\t Researching the information for my presentations has lead me to think more about the use of multi-method functions, protocols, and records. Protocols are going to be a great way to carry a method with variable parameters but the same behavior. Using something like this, the bowling game could look much different. There could be a bunch of protocols that carry the different logical behaviors of the game and a record that implements all of them with their given parameters. This kind of code is really intriguing to me and I look forward to trying something like it! ",
    date: "5-6-2025"
  },
    {
    title: "Rough estimation",
    blog: "\t The Test-driven development mindset is a discipline. At the start of my journey, the idea of using TDD was really an easy sell. The eulers are fantastic small problems to get the idea of TDD flowing. However, when I stepped up the project to a larger scale and also it being a project that I knew what direction I wanted to go, I ignored the process. Not purposefuly but blind haste I hurried through getting my ideas out. \n\n\t Watching the Mocking videos was a great way to understand the different ways to test projects more thoroughly. Also getting to have help with this process in tic-tac-toe has been helpful. Using a combination of with-in-str and with-out-str and then stubbing out a function. \n\n\t Getting to get a glance into a GUI framework today was an exciting moment. I am thrilled to jump into Quil and work on the game of life kata. Using a canvas is a fun way to draw graphics with javascript and Quil looks to be very similar so there will be some familiarity. It looks like it might even be set up to be easier to get started. ",
    date: "5-7-2025"
  },
      {
    title: "To Refactor, Or To Transform?",
    blog: "\t The twelve transformation that are small changes within your code that will alter the behavior in a specific way. The priority of these behaviors matters and should be used with the highest of available priority transformations to be used in a situation. Watching Uncle Bob solve the example problem and ending up with two different sorting algorithms as a result was a shocking thing to see. Just by adding a computation to a new variable rather than assigning to an existing state, the speed of the algorithm improved by miles! \n\n\t Getting to get a better look at how to properly stub a functions behavior today was great. The ability to check the invokation of a function and spy to see the about of calls. This is very exciting to see the tools used in the language I am actively trying to learn. \n\n\t Ready to present the Interface Segregation Principle tomorrow!",
    date: "5-8-2025"
  },
      {
    title: "First week as Curator",
    blog: "\t My skateboarding theme for the week was a slight success. It was fun to choose people to speak about every morning and share some of my passion for skateboarding with my team. I believe Jason Lee was the winner of the week. Being a famous actor helped create add something for people to relate to, if they have seen the show even once. \n\n\t Presenting the Interface Segregation principle went well this week. Showing the relationship between the ISP and the LSP was a great choice, I only wish I would have thought to mention the tie in with the SRP as well. Alex was right to point it out as they go hand-in-hand. \n\n\t Starting off with the Quil example project was a great introduction to the tool. I am really liking the simplicity of the workflow. Having preset setup, update,and draw abilities built in is extremely helpful for getting started quickly. After fiddling for a while, I am able to create a screen of squares and change random squares color by changing a :on value to 0 or 1. This will come in handy when tying in the logic for the Game of Life. I'm excited to work more with the tool and better understand the Kata itself. A visual project will be a nice to the terminal projects I've been doing.",
    date: "5-9-2025"
  },
      {
    title: "Move over, Monday!",
    blog: "\t Everyday I see something new in clojure or understand something about the language that makes me so excited. Today I used my first multi-method while adding the new game modes to my tic-tac-toe project. While doing my research for the presentations I keep seeing these sort of methods coming up and have been itching to find a use. \n\n\t During this whole project I have noticed that I tend rush through a problem. The act of doing test-driven development will be a discipline for me to actively work at every day I am writing code. Today I slowed down a bit and thought my tests out, starting with a function that will, similarly to the select-game function, allow a user to select a difficulty. This function has a responder function for the :else case that will let you re-try your selection. This came together with tests for things like 'prints-options', 'retries for bad input', and then moving to checking for return values. \n\n\t Doing these sort of tests along the way left me with a well tested set of functions that I felt comfortable refactoring. Adding a few more tests in my code for some missed opportunities for better tested code. A great day of learning how to refactor and properly test my code.",
    date: "5-12-2025"
  },
      {
    title: "The power of the stub",
    blog: "\t Looking back through my tic-tac-toe code today ended with me having a better coverage of tests. At the beginning of this project I really had no idea how to properly test anything behond should= which if very limiting. With better insight on some of the capabilities, I am continuing to find pieces of code that I could have tested my way towards the first time. These are valuable lessons that I hope to be more thoughtful about next time. \n\n\t Moving code into new namespaces was a great way to see some of these tests that needed to be implemented. Doing this resulted in a list of modules such as ai_turn, board, game_options, human_turn, init_game, and printer. These come with their own specs accordingly and each test file imports their direct testing file as 'sut' to signify which functions are the ones being tested, and which are used for utility and being tested elsewhere. \n\n\t Meeting with Scoops was an informative insight to my lack of though about what is going into each module. Each module should only have functions pertaining to that modules use. Creating a 'ai-util' module which in reality was holding mostly the actions pertaining to the board itself, thus prompted a re-arrange and re-name! \n\n\t After meeting with the other apprentices for a while today I was left with a euphoric feeling that I am in the right place. Looking forward to my IPM with Micah tomorrow to see what he thinks of my refactor. Did I over extend my namespaces? We shall see!",
    date: "5-13-2025"
  },
  {
    title: "Remove that abstraction!",
    blog: "\t During my weekly meeting with Micah today I was going into it with my head high and with the intention of showing off my very first multi-method! This feeling of victory was soon changed to one of missunderstanding. A realistic view at my work helped me understand that I was misusing the multi in the first place! As Micah mentioned, why would you create this abstraction and then leave it in the source file. This kind of method turns into a \"code smell\" which we want to avoid at all costs of course. As suggested I will be rethinking the implementation of the method and where the calls for it should live. \n\n\t After my meeting, I spent the rest of the day watching over the Dependency Inversion Principle video again and researching exactly how I want to explain the principle. Coming up with ideas for a simple diagram that shows not only the inheretence of a interface between high and low level modules, but the effects on compile and run time dependencies that these have. I am hopeful that my presentation will sit well with the team and look forward to their feedback!",
    date: "5-14-2025"
  },
  {
    title: "The Game of Life",
    blog: "\t What an exciting day of playing with something visual! After building a very large functin that had a binding for each direction for checking a neighbor I was able to get the problem solved, although it wasn't pretty. However the tests told me to find 8 neighbors of a cell and so that's what I had to do. \n\n\t Letting the tests guide me towards the ultimate result of each cell behaving how I wanted. Using a update-state function that creates the inital x and y to then send off and let the logic handling functions take care of that business. \n\n\t After completing and taking a look back at the solution I noticed that huge let with all of the eight directional bindings taking up such a large amound of space. I knew that it was time to refactor. But what is the right solution? Thinking about what was happening, I was simply incrementing and decrementing the x and y by 1 in the right pattern to get my expected result. So I created a neighbor offset pattern that can be easily used to create a list of the eight neighbors' values. This gets folded into a map structure using frequencies and that can ultimately be used to calculate the behavior of a given cell! \n\n\t Watching the result of this project is a very satisfying feeling. Playing with the colors and giving each frame tick a random color makes starts to make it look like a twinkling sky after enough evolutions have settled into their solid structures. An amazing day of solving problems and I look forward to practicing it again tomorrow!",
    date: "5-15-2025"
  },
  {
    title: "Improvement",
    blog: "\t Getting better feels so good. Today I felt very comfortable when building the logic for the game of life and even added some tests that better help me take the proper steps to having a better test suite backing up the project. Presenting at the lunch and learn today felt good as well. Public speaking in front of the team is becoming more natural with each principle. \n\n\t Tic-tac-toe now has a 4x4 board that will soon be usable by a player. At the moment I have tested my way to having the options and input handling set up and ready to dive into adding the ability for a user to choose. Minimax is working but is very slow right now. I will need to do more researching on how to improve the speed of the ai because taking upwards of 20 seconds or more is not going to fly for most players. \n\n\t I cannot wait to make this a speedy and playable version of the game! Another fantastic day of being an apprentice with the Clean Coders team!",
    date: "5-16-2025"
  },
  {
    title: "The power of Cache",
    blog: "\t What a huge change! Before today all of my tests that included things like having the ai choose a move from an empty board or many other positions cause an excrutiating wait for the tests to complete. After thikning about this over the weekend and remembering that the memoize function exists in clojure I decided to try playing with it today. It is pretty unbelievable that something as simple as adding (memoize ) in front of your function can increase the speed such an extraordinary amount! Running my full test suit before took around 17-18 very long seconds. After adding a memoize to minimax the time was reduced down to something like 0.5 seconds or less! \n\n\t Getting this set up and seeing the massive speed increase had me filled with joy and hope that the 4x4 version of the game would be a playable option now. I was mistaken. The larger version of the game still takes a very long time to make the first few moves for the AI. Eventually I attempted to play with the depth and see if setting a max-depth would help at all, and it did. Only with this setup, the ai isn't un-beatable. After looking a little into alternate methods to improve the speed I came accross alpha-beta pruning. Tomorrow I will attempt to implement this into my game to finally have a playable ai for the larger game board option.  ",
    date: "5-19-2025"
  },
  {
    title: "The speed of light!",
    blog: "\t Even faster today! My little project has grown into quite the impressive display. It is truly motivating every time I find a new way to solve a problem. The fact that there is always a new technique you might not have thought of makes me want to re think all of my previous work! When I first case accross alpha beta pruning I was not sure how I would fit it into my minimax as it sat. During my last IPM meeting with Micah, I was suggested to switch the heart of my minimax to a reduce function, which was a great way to clean the space up. After a while of pondering if I could remain with such a structure, I decided to switch back to a loop system. Needing to be able to keep track of multiple changing variables, It felt like the right choice. \n\nt The system starts in a similar way as before, setting the best score to an extreme and getting the new positions and board. Then we introduce our alpha and beta variables and set these along the way of each recurse. These are set to the min and max accordingly, eventually resulting in the check of weather our alpha has found a better spot than the opponent could at this point and take the spot. \n\n\t Doing this improved the ability of the ai in a 4x4 board environment by a large margin. It was still a bit slow on the first couple of moves however, taking ~4 seconds to initiate its move. Adding a best-early-move to the system which prefers corners and middle for the first 4 moves of the game allows a offensive start for the computer player and skips the long first couple moves. \n\n\t The system is fast and I am excited to see what my mentor and Micah think of the progress tomorrow at IPM. ",
    date: "5-20-2025"
  },
  {
    title: "Disco IPM",
    blog: "\t Another really great meeting with my mentor Alex and Micah during my iterative meeting. I really am thrilled to get such positive feedback on any aspect of my projects. Working through the problem while trying to find the simplest solution really paid off. Unfortunately I did not have a full test suit to back this up, as was pointed out during the meeting. Looking back I must acknowledge my flaws in my work. There is a needless test counting the neighbors of a cell, while none of my future code relies on their being 8 neighbors. The update state function is built fully out with no testing on the different functions that are built within the update itself. \n\n\t I am grateful for the feeback and ready to make progess on my new features for my tic-tac-toe! The problems are ramping up and becoming problems that I have wanted to solve for a long time. Saving to a file and restarting a game in progress is a really exciting thing to me so I can't wait to implement it!",
    date: "5-21-2025"
  },
  {
    title: "Design Patterns, Which to present!?",
    blog: "\t After my meeting yesterday, I was ready to dive into my presentation that I will present during lunch and learn tomorrow. This presentation was a bit more challenging to put together in a timely manner, as I wasn't aware of just how many design patterns there really are! Spending time going through each one in multiple example cases was more time consuming than expected, however it did result in me thinking about multiple ways that I could go back and refactor my tic-tac-toe game. \n\n\t Eventually deciding on the Template Design Pattern to present and looking for examples within my own work to relate the pattern to better. I found a place that my code was voilating this pattern and a simple refactor made a great example of what the pattern can help prevent. \n\n\t Learning about edn files and how to read/write was a really exciting adventure! Going into the problem, I decided to create the file and found a simple documentation walking through the basics, then it was off to the races with implementing the ability to \"split\" at the file and save my game one move at a time. This came together quicker than I had anticipated, which was a relief. \n\n\t Today felt like a big day of making good progress with totally new ideas, and I loved it! Another awesome day as a Clean Coders apprentice!",
    date: "5-22-2025"
  },
  {title: "Youtube Star",
    blog: "\t Once I have graduated from my apprenticeship I will have a Youtube career to go along side my craftsmanship! Listening to the feedback from my meeting this week, I decided to change my testing strategy going into the Game of Life kata. Instead of worrying about how many neighbors a cell has, why not start with a single neighbor check? I asked myself this and then typed out a test. This allowed me to get that neighbor with single coordinates. A test like this allowed me to read for all of my neighbors and count the active cells, or those with a value of 1. \n\n\t Adding tests that forced me to write functions that would be involed in the final reduce to change the boards state, instead of refactoring one giant function out after writing the whole thing. It was a more satisfying ending result, as it only took one small reduce to handle the big game. \n\n\t The little game that could! Tic-tac-toe is evolving daily. Yesterday I update to restore the current game being played if you are disconnected from your terminal, today I add a third dimention to the system! Getting a good grasp on my direction for the start of this feature took me some time to decide on. Ultimately, the terminal gui is always in 2d. So I thought; why force 3d style of printing if we can focus on making the logic of the game conform to the larger world. So far, I have a gui that I believe looks nice and will be able to be integrated in my already existing processes. \n\n\t This was a great Friday with a fun lunch and learn of bonding. I am looking forward to my birthday tomorrow and then getting back to building the logic for the ultimate form (maybe) of my tic-tac-toe!",
    date: "5-23-25"
  },
  {title: "Heuristics",
    blog: "\t Approaching the 3d version of tic-tac-toe was very intimidating. Knowing that minimax will only work up to a certain depth had me jumping to solve this with heuristics. Thinking about what the AI player will need, I started with a win/block check function that would allow the AI to snap to block when you are set up for a winning move. This was a promising start that lead me to building other systems that will score the game differently, based on how many spots a given player has filled, where a two in a row has a higher value than one. This problem is very challenging due to the forks. I have made a function that will check if the opponent has a chance to place into a position. This is only looking one turn ahead right now and leading me to be able to win if I am the starting player. The AI will not let me win if it starts the game, always resulting in a tie or the AI winning. After playing with depth for minimax and trying different fork ideas, I have run into a wall. The idea of creating a heuristic based AI is working, I just can't land the finishing touch and am finding myself going in circles in my code. Tomorrow is a new opportunity to solve this problem and I greatly look forward to the feeling when it is solved.",
    date: "5-27-25"
  },
  {title: "Iterate and meditate",
    blog: "\t After meeting with my clients for my iterative meeting, I left slightly deflated. Dropping the ball on testing some of the core functionality of my reading/writing to edn was a wake up that I need to make a couple of changes. Using my production project for testing things like reading and writing was a mistake. It made me fail to write the tests that should have lead me to properly implementing this feature. \n\n\t Thankfully, I have a great mentor who has been extremely patient and helpful about these things. Getting to pair after the meeting and work through how some of the tests should have been written was very helpful and insightful. Being able to trust a core function is a must, so why not be able to stub its functionality out? I was overthinking this process when trying to write tests that fit my already working code, when it should have been the other way around anyways. Not only was he a major help for understanding how to properly stub those functions but also with some of the ideas of state flow and usage of parameterizing the storage service used. \n\n\t Getting into Java only slightly was a really fun change for the end of the day today. I was able to get a project running with my own class running a 'Hello World'. Tomorrow I will look into how to properly set up tests so I can begin practicing my bowling kata in a new language! Very grateful for another meeting with my clients that ended in a positive. ",
    date: "5-28-25"
  },
  {title: "Lets go bowling! Again.",
    blog: "\t Learning about testing in Java today went really well. After spending a small amount of time researching my options I came accross Junit and was able to have IntelliJ download and import everything necessary into my project. Getting my tests up and running was no problem after I got Junit added into my run/debug configurations. This was fantastic progress and allowed me to write my very first test! \n\n\t Excited and filled with confidence I moved forward with my bowling kata, creating a test that would force me to create a Game class. Java and IntelliJ make this incredibly easy to do if a name is not recognized. Being able to whip up new class files and methods, fields, or anything else you need inside of it so quickly is very fun and makes me feel like I'm doing a lot even when I was only getting a single test going.",
    date: "5-29-25"
  },
  {title: "A Commanding Friday",
    blog: "\t Doing research for a new presentation is always a great way to fully understand a topic. The design patterns were a new topic to me just a few weeks ago, and now I have done a presentation on two of the patterns. Most recently, the Command Pattern. This pattern encapsulates a request as an object which contains all of the information about the request. Allowing for complex commands and a flexible, extendable system. A structure which involves five core actors. Comman, Concrete Comman, Receiver, Invoker, and Client.Learning about the Command pattern helped me to get a better visual of how to properly seperate and maintain a sequence or storage of actions. \n\n\t Thinking about the future of my tic-tac-toe and knowing that I will have to implement the ability to switch the storage outlet I wanted to go ahead and add the key into my state object. Immediately after adding this I noticed that this will create a problem. All of my previous tests that are checking for exact values within my state parameters will have to know what the storage device will be, or the result of the test will change on startup. Spending a while trying different options, I came accross one that feels good. Using an empty atom to staore the result of each test and only checking for what I want to know is an exact match, relating to the test name. This works fantastic and allows me to continue passing my full set of parameters in my state object. \n\n\t A fantastic Friday of getting to know my fellow teammates and spending a little extra time with my apprenticeship peers. Looking forward to another week of learning Clojure and perfecting my craft!",
    date: "5-30-25"
  },
  {title: "Persistence",
    blog: "\t The ability to replay a game that has completed has finally started to show itself. Today was a tough day of writing what seemed like endless test to try and get some momentum started. Writing tests that were supposed to be leading my toward victory wound up having me chasing my tail in circles. Granted this is absolutely at my own expense. I should not have used as much time attempting to write a worthy test. Getting caught up with fixing my state object earlier today really made the deadline of my story a little more nerve wracking. Eventually after dealing with a lot of thinking about my next move, I was able to make some progress on the replay ability once I have parsed out the previous game that I will be looking for. Using a stub on the edn/state to include my :id 1 game ensured that I can grab a specific game. The replay function lets me toss the board size and moves list in and watch the magic happen! \n\n\t I'm looking forward to completing this implementation tomorrow.",
    date: "6-2-25"
  },
  {title: "Let's watch an instant replay",
    blog: "\t Testing my way to victory is the name of the game. Spending an ample amount of time working on a proper test that would lead me to writing at least a peice of my feature became a real challenge. Ending up with what felt like a whole day of writing and deleting tests was very mentally taxing. After a fair deal of time working through ideas about what should be the simplest place to start, I decided to lean on the scratch file that my mentor, Jensen had recommended using. Writing out each task that I would need to do in order to fully add this latest feature really helped me to get a visual about which tasks are testable in the current state of the project. \n\n\t This feature was implemented using an Atom to hold each move during a game and packaging this information with some metadata about the game. This all gets tossed into a :previous-games key in the edn file's map. At the same time that this is happening, the user is given an ID to their just played game. This ID can be used at the start of the next session to watch a replay of the game, move by move, while the program tells you what move was just made and who made it. \n\n\t This feature was ultimately really fun to test my way into. My brain is finally starting to thinking in terms of tests first, I am grateful for this. I am nervous about my IPM today and hope that my client isn't too displeased with any aspects of my latest feature. The next step is a big one for me; using a postgres database to store the data instead. Having used both postgres and mysql this should not be a problem. It has been a bit of time, but it will all come back to me very soon. \n\n\t Another great day of learning. Happy to be one of the few lucky apprenctices!",
    date: "6-3-25"
  },
  {title: "Making it right",
    blog: "\t After working through the bowling kata twice in the morning and poking around at my tic-tac-toe for improvements in tests and refactor opportunities, I went into the IPM ready to show off my new feature and test suite to back it up. Stumbling through my bowling kata was a slight set back and a first time that I had to stop and even think about that step, such a trivial thing to get stuck on. Although, I was happy to receive feedback about some refactoring that could remove the duplication of values under the hood of the program. Looking at how to handle the kata in a different manor using static methods was a great view into how diverse Java can be. \n\n\t My test suite came up short! Once I was in a roll of showing off my tests it was pointed out that I was doing tests directly to one storage method and not using the method carried by my state. This was a painful blow to see that I had been writing this out with ignorance to my other storage options. \n\n\t Going into the new week, I will stay positive and keep on testing my way to victory. I have decided on the Adapter design pattern for my presentation so I will be researching and putting that together tomorrow. There is a chance that I might go ahead and mess with postgres now as well to see what I am getting myself into early and see if I will need assistance setting anything up. \n\n\t Very happy to have an extremely knowledgable and forgiving mentor. Alex has been a god-send of understanding and patience and I leave every meeting feeling empowered. A true mentor. ",
    date: "6-4-25"
  },
  {title: "Getting Adapted",
    blog: "\t You are working on your car. It is a simple problem that only requires you to have a ratchet that is the proper size. You have the size of ratchet that you need, only the drive on your ratchet is too small! You will need an adapter that will allow your ratchet to interface with the socket that you need to fix the part. This is the adapter pattern in a brief overview. Allowing one systemA to accomadate and work with another systemB whos expected language might not be exactly what the systemA is looking to receive. \n\n\t After comleting my Java kata it was recommended to me to find a solution using static methods. This took me some extra time to learn about and I even met with a fellow apprentice who is more experienced with Java. Ultimately, I'm not sure that I ended up working towards the solution in a way that would be efficient in any manor. Once I had spent a fair amount of time looking into the topic, I started to feel the pressure of the stories for the week and resorted to recording my kata video in the way I had previously complete it. \n\n\t Tomorrow I will present about the Adapter design pattern and also would like to get the updated functionality of saving previous-games in my db state working properly.",
    date: "6-5-25"
  },
  {title: "Refactoring is easy",
    blog: "\t Refactoring is NOT always easy. After spending the morning adding music to my kata video and getting the video put onto youtube, it was time for lunch and learn already! Realizing way too late that this time was approaching, I left myself with no time to practice or really give a good look at my presentation today. Listening to the feedback I can totally agree with everyone about my animations. I went overboard on them. \n\n\t Getting a weekly break for an hour or two with the team is a really nice time to get away from the pressure of the stories. Once we all parted from the activities, I dove into my refactoring story about how my previous games are being stored. Going into the problem I thought that it really wouldn't be that much work. At this point I have refactored all of the functions that were involved in this process and decided to add a competely new system. One that will handle initializing a game into the previous-games key and a seperate system that will find a game and update its :moves key. This has come with the addition of multi-methods for my previous methods that were handling seperate storage devices based on a case. Every step of the way has come with new test and refactoring old ones as well. The whole process has taken me much longer than I expected. I will be working on the weekend to complete this and definitely get a refresher on postgres. \n\n\t Grateful to be in this position at Clean Coders.",
    date: "6-6-25"
  },
  {title: "Party with Postgres",
    blog: "\t A big step today in my project! A postgres database will be implemented as a usable storage device.Spending most of today in a sandbox environment, I have learned how to do full CRUD operations against my local postgres database. Using clojure's built in jdbc as a dependency allowed me to start up my test suite. Running an initial test as just a connection test, something like 'SELECT 1 AS one'. This ensures that my connection is up and running regardless of the data stored in any tables. Once this was in place I moved toward the more challenging cases of creating, and updating. Luckily, using the jdbc with the specs of the DB makes is very simple to create the queries. In my opinion at this point, the more challenging part is to maintain the data properly, as there needs to be changing of data types to properly store my state as it is now. There are a couple of options that I could use to store my state, one being a full state object stored in my db as a JSONB. This allows a simple transfer of the full object, which is what I am currently doing to my other data services. The other is to create individual rows in the DB for each peice of state. This worked in my sandbox but resulted in a way more code and parsing. Once the inital setup is in place however, you only have to change a couple of keys at a time, the board and turn. \n\n\t I beleive I will attempt to fully implement the JSONB object into the database first, as this is mirroring what I already have in place and will likely be an easier first solution. If my client requests that it look differently then I will change it. \n\n\t I'm having fun getting back into SQL and handling data outside of my projects environment",
    date: "6-9-25"
  },
  {title: "Postrgres Production",
    blog: "\t Being able to run my little game on a real database is a great feeling. Introducing a postgres option was not a simple feat. It introduced the need for a whole new test suite and even helped me find functionality that wasn't fully tested prior to this feature. Splitting all of my large functions relying on a case function into multimethods really helped seperate abstractions and really helped me understand how to dispatch on a single parameter. \n\n\t Getting more comforatble with the process of SQL within my Clojure project has been really fun and helps me to get a better idea of the interaction I may have in the future with data. Thinking about the layout of the schema, I decided to stick with a large JSONB object for my postgres storage. I did this thinking that it would make for the simplest transition from my previous edn file implementation. This was not true and ended up leaving me with a bug somewhere in my creating a new ID for new games process. Once I had gotten to a point that I felt was a solid structure with plenty of tests, I decided to try moving all of these psql functions to their own namespace. A surprisingly longer time than expected had past by the time I'd gotten almost all but one or two functnions moved. At some point in te process, while having a green light for me tests, I thought I should boot up a game to watch it run again. This quickly showed me an error because of some disconnect. Not sure what to do and it being late already I simply left my functions in the previous file and will have to explain why during my IPM. \n\n\t Waking up early and fixing this bug with my ID creation is a big priority. Still a really fun day of handling something that felt more like a real world problem, of sorts. Looking forward to showing my mentor at the meeting tomorrow.",
    date: "6-10-25"
  },
  {title: "Positively Javariffic",
    blog: "\t Today I got up early to squash a bug. This became a relatively simple process, once I had a better look at the exact problem. Previously, I was referrencing the 'last' created game's id to create a new game with the next id. This was working great, until the games being added to my prostgres database were being put in order. This caused me to have games with duplicate id's. We cannot have this! The fix came in the form of a coalesce and a max. Finding the largest id and incrementing from there does the trick! Until my IPM meeting came around, and my mentor noticed that I wasn't exactly storing my data properly. Using most of my functions based on the ID of a game and not giving my database table an ID field was a sort of silly move. I can understand why the need for a change was asked. \n\n\t Overall it was a really fantastic meeting with Alex. Putting in a lot of effort in the last couple of days for this and even having a few stressful moments where I almost reached out for help made for a very satisfying well-done. \n\n\t Following up my bowling Java experience with some bigger ideas in Java is a bit intimidating. I'm looking forward to getting more experience with yet another language. \n\n\t Thankful to have another great week of learning a ton every day. ",
    date: "6-11-25"
  },
  {title: "Hashing it out",
    blog: "\t Arrays are great. Using a simple array for a large amount of common problems will be a sufficient way to store, and access data. This has proven true for many projects of my own that utilize an array at the hard. The tic-tac-toe that I have been building, for example. An array of strings is ultimately the source of visuals as well as scoring the game. All of this has the ability to happen extremely fast with little to no stutter in operations. But when the amount of data beigns to grow into a something unpredictable size, we might need an alternative. If have a normal array that is full of objects, and we need to find the objects whos id is equal to 3, this will be a costly operation. We must look into each index, typically from the start using a for-loop, and ask each entity if its id is 3. \n\n\t The trick to using an array efficiently is knowing the index of the item you are trying to access ahead of time. This is where a hashMap will begin to shine. Using a system that will rely on a hash-function that can convert a key in a key-value pair to a unique index of your map. Once an item is stored using this hash-function, you can re-use the function to get the index again, and look it up. Using this allows for a simple operation that will result in the same pointer. Collisions do happen if the hash-function is not well tuned, and this can be solved with buckets. Linked-lists that live inside of each index of the original hashmap and allow an endless and expansive amount of nodes. \n\n\t Having collisions adds a lot of problems in the future of the storage and should be avoided when possible, but there are ways to handle it. \n\n\t Hopefully my presentation about hashmaps will resonate in some way. I am looking forward to presenting it tomorrow.",
    date: "6-12-25"
  },
  {title: "Data Structures",
    blog: "\t ArrayList and LinkedList, two different ways to solve similar problems. Both of these implement the List interface in Java and use the same methods but ultimately work rather differently behind the scenes. An ArrayList is similar to a typical array. Carrying the same features with methods that will let you add, remove, get, and check for size. These methods allow for internal resize when exceeding the original List's size. On the other hand, we have a LinkedList. This type of list will also carry these same methods, and allow for internal resize even. The big difference here is how the array is being built behind the curtain. A LinkedList will create a new object for each position in the List, called a Node. Starting from the 'head' of the list, each node will have a reference to the next. This sort of a list will allow for quick removal of elements by changing these reference points. Creating these implementations of a List has been a great way to really understand these data structures better, and when they might be useful. ",
    date: "6-13-25"
  },
  {title: "Blowing a bubble",
    blog: "\t Creating the implementations of an ArrayList and a LinkedList was a fun challenge. Last Friday I completed the ArrayList and started working on LinkedList shortly after. While these are both using the same interface and fulfilling the same methods, I wasn't sure how to create the tests in a way to assert into both implementations. \n\n\t Spending the first part of today finalizing my LinkedList methods and filling out the add(el, i) function. After getting this up and runnig, I jumped right into created my sorting methods. Being silly and not thinking ahead at all I simply started making my tests in the ArrayListTest class. After some videos and simple suedo examples, I got some tests set up to help lead me towards a bubble sort algorithm. \n\n\t Bubble sort is simple, traversing the list with pointers to compare one element with the one after it. Swapping the two values if needed and continuing on its way. \n\n\t Merge sort is a little more involed. Splitting the given array in half recursively until a single value is reached. These values can be sent into a merge function that is the brain actually comparing these values and then rearranging the original array. \n\n\t Having almost completed the Merge sort I am feeling great. Also having gotten some fantastic refactor time with Alex that really simplified my future tests against both list implementations. Excited to finish these tomorrow and also add Quick sort to my repertoire",
    date: "6-16-25"
  },
  {title: "Sort it out",
    blog: "\t Quick sort can be really great! It also can be signifcantly worse than merge if the algorithm is given the wrong type of list. After spending a good amount of time researching the algorithm and looking at the different ways of partitioning. I implemented a quick sort using the list methods that I had available to me given the initial List interface. The quicksort function itself is a rather small function that will recurse on a new pivot point every iteration. This function will send the list along with a start and end to the section of the list that will be handled next. The partition function takes over now and does the actual checking of each element's value against the pivot's, swapping them when necessary. \n\nt Setting this function up didn't take too long for me today after having a better understanding of how to properly remove and re-add elements into place. However, once it was in place I decided to try and test the speeds of these. This is where I ran into a problem. Initially having set up my tests to have an already sorted 1000 numbers, I was confused why bubble sort and merge sort were so similar in speed. Right away I was worried about the speed of quick sort. Taking somewhere around 7x longer to finish that the other two algorithms was alarming. \n\n\t After realizing my error in giving an already sorted array, that was quickly fixed with random numbers instead. This immediately showed the false speed of the bubble sort from before. Now taking much longer than the other two. But there was still a problem. Quick sort was still taking longer than merge sort and for an ArrayList, this shouldn't be the case. Finding my implementation methods being the cause of the slowdown, I was able to add a set() method that greatly increased the speed in the ArrayList case. Now, I believe the three algorithms are working properly and the test timers are showing results that I believe are correct for the cases. I am looking forward to meeting with my mentor to confirm this and get some more ideas about possible refactors or tests. \n\n\t This week has started off really great and gave me some confidence in another language which feels very good!",
    date: "6-17-25"
  },
  {title: "Gui time!",
    blog: "\t Today's IPM left me feeling very inflated! Going through the Java work and having answers for most of the questions that came up felt really good. My mentor is very good at holding back his questions when helping me and really making me think on the spot with Micah. I don't mind this. It has given me more confidence to stop and think, which is great. Forgetting to add the timers in my ListTest was a silly mistake. \n\n\t Once I heard that I am being tasked with building the GUI for my tic-tac-toe, I definitely began feeling the nerves again. The presentation is also a little worrying as the information was so long ago. My notes are very good though, so I hope I can come up with something. \n\n\t I will end today spend looking at my notes and coming up with ideas for my presentation. It was a great day and I'm happy to have another week under my belt here as an apprentice!",
    date: "6-18-25"
  },
  {title: "Component design",
    blog: "\t What is a component? How do you formulate the structure of a component? What are the principles we should follow when creating components? Going back through all of this information was a great refresher on how to compose components with some rules to follow. Using the Single Responsibility principle to decompose your system into actors is the start of designing your components. We group these by what actor they serve as well as following the six principles. \n\n\t The component cohesion principles tell us how to compose a component out of classes. This is made up of three principles, the Release Reuse Equivalence Principle, the Common Closure Principle, and the Common Reuse Principle. \n\n\t The component coupling principles help us determine which components should depend on each other. Consisting of three more principles, the Acyclic Dependencies Principle, the Stable Depenedencies Principle, and the Stable Abstractions Principle. \n\n\t All of this followed by the formulas and how to calculate stability makes for a rather long presentation that I feel is wordy. There is a lot of information in the principles, though, and it was a challenge to fit. ",
    date: "6-19-25"
  },
  {title: "Learning to lunch",
    blog: "\t Yet again lunch and learn comes along to make me acknowledge another week has come to an end. Looking through the presentation that I had put together, I was disappointed with my work. It was very wordy and felt like a death by powerpoint. Hoping to add to the experience with some added visuals, I added new backgrounds to some of the slides. Althought the content didn't change too much, small formatting adjustments. \n\n\t The presentation came and went in a flash. It was a lot of content to spew in just a few minutes. The lack of feedback tells me all I had expected, it was boring. Hopefully next week I can come up with something better on whatever topic my mentor decides. \n\n\t After some needed break time playing and chatting with the others I turned my focus on the database story for the week. Changing the format turned out to be more of challenge than expected, but helped me gain some extra experience with parsing data and reformatting when needed. I even got to use a new clojure function 'walk/keywordize-keys'. This is great when parsing data from json and wanting to get your stringified keys back to keywords! \n\n\t Looking a bit into quil, I am still quite intimidated. Hopeflly some things start to click over the weekend for me. This will be a great finishing touch on my tic-tac-toe and I look forward to seeing the completed project. \n\n\t Another great week, so happy to be in this position. Thankful for the team I have. ",
    date: "6-20-25"
  },
  {title: "Learning to draw",
    blog: "\t Using Quil again has been a lot of fun. I am getting a better understanding of how to create menus and change between them. So far, most of menus are created and there is some possible transition between them. Currently I am using a large conditional statement to handle the transition between screens based on a :screen keyword in my state object. My mentor quickly pointed out my lack of tests and that is something I worked a little on yesterday afternoon and will try to add more of today. When starting the project I made a spec files for tests but then quickly went into how to handle the transitions and jumped into making the visuals of the menus. \n\n\t Creating some hlper functions along the way like draw-buttons and in-button? to check for clicking inside of the buttons has helped to simplify the reading of functinos. \n\n\t Now I need to implement my working logic into this gui and make the game play as well. This will be a big challenge tomorrow I believe. Can't wait to see it completed!",
    date: "6-23-25"
  },
  {title: "Picturing it all",
    blog: "\t This was a huge day for my gui. Having come into the day with most of my menus drawn, I knew that it was time to add the logic. First however I needed to complete my drawings. Spending the morning working on getting the 3x3, 4x4, and 3x3x3. The 3x3 and 4x4 were up first and so using the cell-size and game window I am able to draw my lines and calculate the placement of the cells values. Then once I needed to conquer the 3d board, I needed a totally different way of calculating. Thus became a new function which is solely responsible for the 3d drawing. To get something easier to work with, I began partitioning the cells into layers for the top, middle, and bottom boards. \n\n\t Once I had these drawn it was a good into the game loop. Being able to click in the cells. Using a multi method for this to seperate the three different boards helped me create a polymorphic dispatchable way to interact with everything. This became a huge hurdle when I began tying my click input to my game loop. Not even realizing, I had created a system that would never allow an ai vs ai game due to the clicking block. After getting some well needed advice from my mentor I noticed my mistake and started moving towards a game-loop re-write that would handle returning the state at each step. \n\n\t I am proud of my progress today, although I am still not there. The game will run on 2/3 boards and you can get back into a previously started game. You cannot however play a 3x3x3 game with human input or watch a replay. Hopefully I can get these working early tomorrow before IPM. \n\n\t Thankful for the advice and looking forward to having this step complete. ",
    date: "6-24-25"
  },
  {title: "The big oops",
    blog: "\t I fell short this week. I didn't have all of my features implemented in my GUI and also didn't fully complete the postgres database work either. This was a hard meeting with Micah and Alex. Failing is a part of the process, though. It is expected and I am surprised I haven't had this big of a failure so far. At least completing one of the two big stories for the week would have been the ideal move. Going forward with my GUI work when my database was not fully completed was a mistake and a lesson learned. \n\n\t That being said, I was still happy with the amount of work that I managed to complete. The task of creating the full gui and tying all of my previous logic into it was a rather large one to manage. I am happy with the tests that I was writing against my business logic for the gui, which I didn't even bring up in the meeting. The focus was definitely on my short-comings. \n\n\t After the tough talk was wrapped up, both of my previous large stories were moved into the next iteration. This only left me with a presentation story in addition to them. I have decided on the Decorator Design pattern due to the similarity to how clojure is extended. \n\n\t Getting to pair with Alex today and work on my postgres implementation was a huge help. Having an idea of what the next test should be is a surprisingly hard thing for me some of the time. Going through and re-writing the entire postgres schema is a huge deal, I am grateful for the help. \n\n\t Leaving today feeling better than it started. I am extremely grateful to be here and have to take full advantage of the opportunity. I won't let my failure last week bring me down.",
    date: "6-25-25"
  },
  {title: "Decorating the future",
    blog: "\t The Decorator Design Pattern is a great pattern to keep in mind when working in a functional programming space. This pattern gives us developers a way of building behavior on top of a previous class or interface without going into the code of that object and changing anything. The idea is based on stacking the new functionality together. Creating 'wrappers' that will enhance the previous version of whatever object you had started with. This comes with some caveats that could end up introducing new barriers in the future of your program. If this system isn't designed properly it could be a challenge to remove the layers of a wrapped object. \n\n\t The design pattern does help us follow some SOLID principles like the Single Responsibility and Open/Closed principles. Allowing each new wrapper to focus on a specific behavior ensures SRP is followed and by continuing to build on the original object we are extending its behavior without ever touching the source code. ",
    date: "6-26-25"
  },
  {title: "Holy Canalee",
    blog: "\t Being un-able to present my Decorator Design Pattern today was a little bit of a disappointment. Losing a crown on a tooth is scary, so I had to get an appointment set up asap this morning which left me away from my desk during lunch and learn. This was handled promptly and allowed me to make it back with a little time to spare of the day. \n\n\t Working through the new tests for the re-design of my postgres tables has been a really fun and enlightening process. I am thankful for getting to spend time talking about how these tables should look and how to create the relationship between a game and the moves for a given game. While I had previous postgres experience, it has admittedly been a long time since I have had to implement any relationships between tables. \n\n\t Switching my tests from using a 'test' database to stubbing out all of the db functions was another good lesson. Not only to see the multiple ways that tests like this can be written, but to get to hear how Micah and Alex think about these things was benificial as well. At this point I have don't most of my new tests for postgres with only a couple left to do. \n\n\t After last week, I am grateful for a week of refactoring. The pressure of the full GUI and a database refactor was a lot. This time I have only a couple of things left in my GUI logic and this refactor is shaping up nicely. \n\n\t I'm very happy to be on this team and can't wait to find out what my next project will be based on.",
    date: "6-27-25"
  },
  {title: "Making it visual",
    blog: "\t This morning I spent some time thinking about how I could fulfil the storage functions. The refactor for postgres from last week was going well, until I ran into the functions that are handling removing the current-game key and updating the previous-games table. These functions are being used by the other storage devices which is why I hesitate to remove them completey, even though I am not using a 'current-game' or 'previous-games' tables anymore. With the current functions that are in place for postgres, the ability to find a game, start a new game in storage, find a specific game using and id and the moves along with it all are working. From this, I am not sure what to do with the extra functions being used be the other storage. I could remove them from those storage usages as well or re-thing the meaning of them for postgres itself. \n\n\t Figuring out exactly how to get my input for a 3d board came with its challenges. Calculating the size of each cell and board, the x, y, and board size are sent into a helper function to find which board is clicked on before searching for the actual cell. Once this was done I wanted to complete a replay. This was done with a reduce before which allows to print the games info during each loop, but in Quil I needed to return the state at each step. This came with setting the :screen key in state to a replay. This will make one move at a time as long as the screen stays the same. Pulling out the current move off of the remaining and returning them as the :replay-queue. \n\n\t This among displaying the games id and other small tasks filled up the evening. Tomorrow I look forward to completing the postgres setup. ",
    date: "6-30-25"
  },
  {title: "Making it right",
    blog: "\t Spending the better part of today in a meeting with my mentor was a huge help. Refactoring my database has been a longer project than expected. Understanding what the data should look like can be a tough thing to grasp. The previous version of what my data could be was ugly and hard to understand, having functions that are almost identical for two tables that really could just be one. Changing my whole structure to a single state object was not easy. It involved changing every function in my database implementation. Removing the need to have a 'current' and 'previous' games and simply having a single list of games. Sure, the postgres storage might have a second table but it is directly related to the games via a 'gameid'. The file based persistence is now being handled in a similar fashion, but not exact. This looks more like a single hashmap with all of the data behind a single 'id' for that game. This map carries a :state and :moves key and stores the same data as postgres. \n\n\t After having these two setup I was thrilled. Once I realized that the :mem implementation had to be done, I was slightly deflated. \n\n\t Tomorrow morning is slightly stressful and I am hopefull that I will have everything working for IPM. ",
    date: "7-1-25"
  },
  {title: "Learning to fail",
    blog: "\t Failing at anything never feels good. The fact that I failed at the same two things for two weeks in a row has been a huge setback for me both in my apprenticeship's progress and my confidence. This database refactoring has been a much larger project than I had anticipated. Having to change all of data storage implementations set me way back. Attempting to handle this all on my own caused me to make critical errors in the design of my code. I am at a point now that I have to admit that I did not follow the principles that I had been learning. There should not have been as much of a headache from the changes that have been recently made. Having my gui fail in different places than my cli has pointed out some inconsistencies and violations. Spending a whole day this week handling a games replay and continuing into a game only to have those features fail for this update was devistating. \n\n\t At this point, having such bad ties in my project, I almost want to take a step back and rething my understanding of the principles and how to properly design a system. I almost have to ask myself, have I been practicing what I have been preaching during these presentations? \n\n\t Getting a compliment on the presentation today was a good feeling though. Finally I have a week that I do not have to worry about a presentation which always causes me to lose a whole day. \n\n\t This is going to be a good week. I will not let this setback bring me down. I will continue to learn and grow. There is no way that I will let this opportunity slip away because I have worked so hard for it. \n\n\t A huge huge thank you to my Mentor this last and coming weeks. There has been a huge amount of patience involved with helping me re-write this code. So thank you Alex!",
    date: "7-2-25"
  },
  // {title: "",
  //   blog: "\t ",
  //   date: "-25"
  // },
]

export default blogPosts

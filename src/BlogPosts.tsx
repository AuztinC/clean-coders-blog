const blogPosts = [
  {title: "Day One - Blast Off!",
    blog: "\tThis is my first blog post. Today I learned about a lot of tools that I will use to be successful at Clean Coders. Tuple, CC-Epic, and CC-Poker. I used Tuple to partner with my mentor Alex where we discussed the process of estimating jobs and features.\n\n\tAfter deploying this blog site, I will proceed to setup the environment on the Mac Mini that he has provided me as well as watch the first video if time permits! The Mac Mini is set up with the proper environment for the clojure koans and the first few koans are complete.",
    date: "4-1-2025"
  },
  {title: "Day Two - Diving in",
    blog: "\tKoans! Today I did Koans 7 - 20. Going back through the Koans a second time has been a great refresher. I got stuck on a couple of the problems but proceeded to use the lein REPL to evaluate expressions and figure out my answers. Taking deeper dives into some of the key functions I learned the power of 'Let' to bind data structures to symbols. This is great way to destructure a datatype. 'Ref' will help us create a mutable object which I imagine could be great for managing things like state. ",
    date: "4-2-2025"
  },
  {title: "Day Three - Taking a closer look",
    blog: "\tThere is no shortage of information to be learned! After pushing through a couple of more Koans, I met with Alex J and understand some of the Koans I had earlier got to pass but didn't fully understand why. I now understand meta data a bit better, The ability to attach underlying data to an object. I found myself going into docs today to read more about some Clojure functions (seq vs sequence, meta, vary-meta, and more).\n\n\t Alex Root popped in to say welcome, which was very appreciated and made me feel like a part of the team even more! Macros are confusing. After spending some time trying to understand where I was going wrong I again asked for some help and got clarification on the 'recursive-infix' problem within macros. After restructuring the macro being create I was lead to find a further use for the 'drop' function as well as nthrest(the ability to take the end of a form starting at a certain index). \n\n\t Koans are complete although I will be scouring back through them in due time. Multimethods are very useful, similar to 'method overloading' in c#; This gives us the ability to have different outputs from the same function based on the inputing parameters.",
    date: "4-3-2025"
  },
  {title: "Day Four - A task for the Tin Man",
    blog: "\tHow would one go about grouping the frequency in which an element occurs within a given collection? ChatGPT thought this would be a great practice lesson for me to solve, so I dove right in. While trying to use my wits and ability to problem solve, I came up with a conclusion that I thought was genius! \n\n\t 'Using Reduce and Assoc I can see if each element exists within the accumulator and update that keys value with Inc. This process took my a while of looking through docs and trying different map functions like Update.' This is when Alex jumped in to kick off the Euler project, and after showing him my progress he was happy to lead me to a function in the docs called Frequencies!.. This function is amazing for this exact task! \n\n\t The process of building the frequencies function is still an important one to understand, though, and so I am excited to be able to build functions like these from scratch. \n\n\t Euler 1 began with me having to fully understand Modulo(the Quotient of the init value by the given Mod), which I had only used briefly in the past to check for odd or even numbers. After helping me understand this concept fully, Alex lead me through my first use of TDD. We wrote some practice tests that helped with the Modulo practice before we took a break for Lunch and Learn. After games with the team, I went back to finish this Euler alone as Alex had become busy. Solving this problem felt really great! I found Kristi in the clubhouse and got great help from her on how to submit my answers for Eulers and also getting the next problem started. \n\n\t Towards the end of the day, Alex suggested that I might begin watching through the videos, and so I finished the first video as well as exam. \n\n\t It was a fantastic first week working with the Clean Coders team! I have been made to feel like a part of the team right away and I am grateful for that. ",
    date: "4-4-2025"
  },
  {title: "Figuring it out",
      blog: "\tThe ability to precisely and accurately manage data within maps and vectors is slowly becoming more clear. The problem of grouping-frequencies was stepped up by the sum of the fibonacci sequence, followed by the largest prime factor of what might be the biggest number I've ever seen. Starting, I got some base case tests and examples of loop vs having a function call itself in the stack from Alex. \n\n\t Using some powerful wizardry called recursion with a loop to set our collection and add to it while using fancy tools like last and butlast to get our last two numbers in the collection. Once these two numbers are added the result can be compared with our incoming 'n' value to see if we have reached our max value where it is ultimately filtered for the even numbers and then reduced with +. \n\n\t The largest prime factor; sweet and simple, right? I started this problem alone and was slightly nervous about that. Choosing to separate out my functions, I began with factors alone. Base case is the game, get something running. After getting a simple 2 to pass through and struggling to gain movement forward. Eventually I stumbled upon a winning result, using a range to our n value and filtering any (mod n incrementing-number) that equal zero?; we get our factors which we can then run through the prime? function to filter any prime numbers. Both of these functions had to be refactored by using Math/sqrt n on our respective ranges. \n\n\t Ending the day; I completed episode 2 and 3 of the clean coders videos. Also completing two more ChatGPT practice problems, the group-by-fn, finishing filter-duplicates, and a quick flip-map. Big day, many more to come.",
      date: "4-7-2025"
  },
  {title: "A day with Uncle Bob",
      blog: "\t Function names matter, and should be no longer than around 4 lines. Something I have felt myself wondering in the past, have my function names been descriptive enough? Probably not, when I reflect back and think about some of the projects where I was in a hurry to get my idea out and didn't want to be slowed down by writing out long names that would have helped anyone ready my code if ever they chose to. Even I myself would have benefited from this simply by knowing that I could go back and immediately understand what I was trying to accomplish within a function. \n\n\t Uncle Bob doesn't much care for comments. The idea is a sound one, your code should speak for itself and when someone reads it, there should not be a confusion based on function and variable names, and the flow of logic. Using white-space properly is something I have tried to keep consistent throughout my projects. Using only 1 space is Bob's convention, which I think is a reasonable one. \n\n\t Avoiding temporal coupling by passing a block. Tell, don't ask, as to avoid long chain calls from functions that should be seperated out. Keeping a file at around 60 lines of code and at most 100 to 120 to ensure clear intent and workflow. These and so many other concepts today really gave me a lot to think about when I'm writing my next lines of code. \n\n\t All of this learning, and getting to watch Uncle Bob do clean-up on these projects and complete the stack kata was a great bonus for todays lessons.",
      date: "4-8-2025"
  },
  {title: "If you plan it, they will meet.",
      blog: "\t Today was my first iterative planning meeting or IPM. I am happy to have a better understanding of what my weekly duties will be at least at this current level of the apprenticeship. Having to estimate is very hard and can be intimidating while doing so in front of multiple people. A feeling I will have to overcome and get confident in answering. The first week I feel I ended fairly strong. I will be proud, but aware that harder tasks are coming. \n\n\t My first task became retaking some of the exams for the videos. While not being directly given a strict goal, I should have not had to go back to fix anything. That task is nearly complete already having only one more exam to fix in the morning first thing. I am actually glad I had to go back though becuase it gave me another opportunity to absorb the information in the videos. Getting to refresh things like how to remove switch statements from your code using polymorphic dispatch and create less dependancy issues due to fan-out, a little bit about Functional and Structured programming and what they are used for, and many other great lessons. \n\n\t Tomorrow I am excited to finish off the previous exams and get started on the TDD videos after I complete the FizzBuzz Kata for the first time. Having to 'Live Perform' the kata is an interested and sort of scary one for me. However, Micah is right in that I should be so confident by a week of completing the task multiple times daily that it should be no problem to talk it out and explain each step in detail. \n\n\t Thrilled to be an apprentice, learning from some really smart and helpful people. ",
      date: "4-9-2025"
  },
  {title: "The Legend Himself",
    blog: "\t The first Kata I was assigned was a fun challenge. The ability to print a string with 'fizz' and 'buzz' at every 3 and 5 multiple, and 'fizzbuzz' if the number is both. I succefully completed it twice today while still managing to go through some old exams as well as complete the first TDD video. Fizzbuzz is a good first challenge for a cata. A problem that allowed me to use something new, both 'doseq' and 'cond'. Using cond we are able to check if an incoming number will be a multiple of 3, 5, or both. This is accomplished using Mod which I have been getting more comfortable with these past few days. \n\n\t Begenning by seperating out the functionality of the question; I created a function to handle each number individually to check for 'fizz' 'buzz' or 'fizzbuzz'. This is the function using Mod to check for divisibility. Next the function for outputting a list of numbers with the strings was created. This function mapped a range of 1 to the (inc c) to allow each number to feed into fizzbuzz and return their value as a list. Finally the function to print the string is created, this function uses a doseq to println the result of each value of fizzbuzz-upto. \n\n\t I'm eager to master the process of TDD and know what to be testing for and when. The repitition of the Kata is a fantastic way to get me used to writing them so I look forward to that comfort. \n\n\t Getting to watch a presentation live from Uncle Bob was really a special treat for the day. His ability to relate things and tie topics together is very inpspiring for my future presentations. Learning about the human body a bit was a great break during my day, and a great refresher for my science knowledgebase. \n\n\t Watching Alex present about TDD and go over some concept projects was also great! A good way to see some realistic case studies of projects and the way the tests are used for the current craftsmen. Grateful for another day of apprenticeship.",
    date: "4-10-2025"
  },
  {title: "Repition, young grasshopper",
    blog: "\t Fizzbuzz is definitely on the brain. It is a fun challenge that I like to totally erase from memory before attempting again if possible. I am able to think the problem through and make my way through each test successfully. Knowing what you want out of a function ahead of time can make the process of testing feel a little redundent, but once you have them in place it is nice to not wonder if the function will break. From using terminal to create the project and open IntelliJ to printing out the final output with lein run -m, I am getting confident in the process. \n\n\t I am happy to have the repitition as a task. While I have been doing practice problems on my own, it helps to a reason to make the project, use the tools, run the tests and commands. After watching and completing another couple videos and exams I am becoming a more well equipped designer and developer. Many lessons that included information like Architecture and the importance of laying out the foundation of a software system, Developing apps driven by independent use-cases, and the disgust of design smells due to fragility, rigidity, and needless complexity. These and many others today involving the importance of interface segregation, the Single Use Principle, and the Dependancy Inversion Principle are huge take-aways for me today. I will be studying these lessons before designing my next system.",
    date: "4-11-2025"
  },
  {title: "Racecar, Level, Rotor, Oh My!",
    blog: "\t Using the knowledge I have gained through the videos and my Mentor thus far. I was able to successfully use Test-Driven Development strategies and solve the problem. The question of 'What is the largest palindrome of two three digit numbers?' was not answered without a set of challenges. \n\n\t Going into the problem I knew I wanted to seperate the operations to build to my final answer. Beginning with a simple function to find the product. Once the numbers are multiplied, they need to be seperated out so that they can be compared to one another. I solved this with a function that splits a string version of the numbers into a vector. \n\n\t Now I have a collection something like ['9' '0' '0' '9'], and with this I will need to determine the amount of numbers in the collection to know where I should split it correctly. A cond with a 4, 5, and 6 variation of a collection with two subvectors, reversing the second half to compare and check for a match with the first. \n\n\t Next a simple function checks if every subvector is matching in our collection using every? true? over our subvec-coll. Thus bringing us to our final step, the grand finale. I was feelng good with my progress after working through a loop that will recursively dec the first int in the num-col before sending it off to get processed and match-checked. This resulted in a green light from my two digit test case, expecting and achieving my result of 9009 from the product of 91 x 99. \n\n\t However. This process did not continue to produce the results I expected when I stepped the function up to a two digit number. I was, after all, looking for the largest product of a three digit number, not two! And so, began my testing. I first had to improve my ability to process the string splitting and reversing which could at first only handle a 4 digit number, due to my expected results of the two digit outcome. \n\n\t In the end, a double nested for loop was used to create essentially a couple countdown timers and a max(outer) and local(inner) palindrome to compare with. Down in the depths we recurse over the inner countdown doing palindrome checks all along the way, and updating our local-max-palindrome. Once the timer is out for both we will result in an output format of [[993 913] 906609]",
    date: "4-14-2025"
  },
  {title: "Re-factor",
    blog: "\t What makes something solid? The ability to resist change from outside forces? Maybe something that is independent and can stand alone or can be relied upon? Well, these seem like good values to instil in the design of our applications, don't they? The SOLID principles help define a design structure that if used will certainly help you get close to having most if not all parts of your application following these and many other great values. \n\n\t Single Responsibility, or the principle that states that each module you build should have one and only one responsibility, and it should do that well. This is a fantastic way to build modules. By keeping all modules small and easy to understand we can decouple complicated logic and remove the overflow of un-needed resources or un-called functions. This principle alone leads you to an easy path to conforming to the Interface Segregation principle. \n\n\t Open-Closed Principle, the rule that asks that your modules each have only the ability to be extended and not modified. When you are building modules that follow this principle, your modules behavior should be easy to change, while the source code of that module should not need modification. When you add a new feature to a system you should only have to add new code to the project, not go in and modify much of the existing source code. Building a system that isn't following this rule must be a real challenge. \n\n\t Barbara Liskov wrote us a great list of rules that were later coined by Alan Coplien as the Liskov Substitution Principle. The idea that a subtype in a system should be able to be substituded in place of its parent and produce the same outcome. Any class that we extend from another should be able to sit in place of the original. If a base clase does something, any derivitive should do that also. Any derived class should be able to do more than the base class and not less. \n\n\t The Interface Segregation Principle tells us that a class should not be forced to implement interfaces it does not need. This is huge for keeping a system decoupled and less cluttered overall. \n\n\t Details should depend on high level policies while high level policies should never depends on the details of a system. The Dependency Inversion Principl separates extensible behavior behind abstract interface and then turn the dependancies around. This keeps us abstracting our policies out from the main applicaion and keeps business logic seperate from low level details. \n\n\t After two hours of refactoring with Alex today, my Euler 4 or the fizzbuzz project code is looking WAY cleaner. The names, functions, tests are all improved! It was an extremely enlightening to see the power of some of clojures built in functins like for. I was shocked to see the simplicity of a recuring double for loops inside of a simple binding expression and printout. Changing names to be somehow what seems to be more simple and also descriptive was another take-away that I will keep with me. \n\n\t A ton of lessons today and I'm happy to be getting them. Another great day of being an apprentice!",
    date: "4-15-2025"
  },
    {
    title: "Buckle Down",
    blog: "\t Performing the fizzbuzz today during my first real IPM check in was a fun and helpful experience overall. I am happy to be receiving such great feedback from developers as talented as the ones here at Clean Coders. Running through the problem at such a fast pace during my practice unfortunately turned out to be a mistake. This habit carried into the performance that I did today and I can understand my appearing to be rushing. My takeaway from the experience is that I need to slow down sometimes. Even if I know what the next step is, maybe there is an alternative to solving the problem in a quicker or more convenient way that I just hadn’t considered in the moment. \n\n\t Doing my estimates made me a little bit nervous my ability to properly estimate. This is the time to learn what I am capable of, though. Once the process of estimating my stories for the week was over, I jumped right into a presentation on the Single Responsibility Principle. \n\n\t Finishing the day I completed two more Euler’s, putting me at the 7th. I am proud of that progress as I went into both problems unsure how to get the answers. Now, to keep the momentum throughout this week and make sure I’m taking the time to adjust the small things that the feedback has made me aware of in my code.",
    date: "4-16-2025"
  },
  {
    title: "Rehearse the verse",
    blog: "\t During my rehearsing today I decided to grab a prop and bring my past experiences into the presentation. I'm excited to share some laughs with the team and get to play a game after as well. After rehearsing a few times I went over some previous euler problems that I have completed as a refresher. I am proud of the work I have done so far, the progress with clojure has been tough and I know there will be other hard challenges and concepts to grasp. Completing euler 8 today put me on cloud nine for a bit, it felt like a problem I was ready for because of the method in which I solved a previous euler was very similar. \n\n\t Finding the 10,001st prime number was the challenge. I set off with an empty test suite and a full stomach. First, I needed a function to check for prime numbers, and so it was done. Using a range starting from 2, I started the pointer at 3 to begin the checking. Using a function that passed the current number to check and also the collection of previously recorded prime numbers, the checks were made rather quickly. Giving the input a max-depth of 10,001 I was able to achieve success and getting the prime in question. \n\n\t After a short break from the first euler, I dove into the second one of the day. Finding the 13 adjecent digits that had the greatest product, out of a 1000 digit number. This one was tricky at first, I was struggling to get the numbers broken into a collection, but still remain numbers. Stumbling through solutions, I found edn/read-string to be useful while maping over the collection of the numbers that are already split into individual strings. This gave me the number that I could then use in a loop with a pointer and max-product. Each iteration the function will drop up to the pointers number, take 13 from that position and calculate the product of them. This is compared to the previous max-product and replaced when needed. This solution works, but I am looking forward to going back and refactoring all of these problem's solutions. The IPM had me slightly nervous about my ability to complete everything, but I believe that I am making really great progress so far. \n\n\t Exciting day today solving problem and making my brain feel huge. A great feeling! ",
    date: "4-17-2025"
  },
  {
    title: "SRP",
    blog: "\t The morning went by quick! I have found myself getting very worried about the use of Clojure itself. Spending a lot of time on my euler projects and repeating the fizzbuzz kata, even after having performed it. Presenting at lunch and learn was exciting. It was fun to get to share some analogies that the single responsibility principle had made me think of. Diving into my examples I found it easy to talk about the similarities in them. After finishing I was happy to receive some feedback that these were examples some others had not previously though about. Having to present just after Kristi made me a bit more nervous, as her presentation was very nice and colorful and mine was, well not. Admittedly, I feel that presentations such as these are a big weak point for myself. I need to acknowledge that and make progress at becoming better. Next Time, I will ask for more help in the ideas and layout of a presentation. Gina's feedback was not taken lightly, after thinking a lot about what she said I do believe that she made a good point. The examples I gave did not illustrate the need to keep overall business/operations responsibilies as a whole, separated. \n\n\t After presenting and playing Fishbowl at the lunch and learn. I dove into euler #9, which was completed after recieving some advice about the wording of the problem itself. This problem has you find the 3 numbers that will add together to equal 1000 but are also a set of pythagorean triplet numbers. This was solved with a function that checks for pythagorean triplets on its own by taking in 3 numbers and comparing and calculating the algorithm. After this, a function 'test-triplets-under' was set up to make a nested loop with A, B, and C. A being the range to the incoming number. B, a range that starts above A and C which is the result of subtracting both A and B from the total incoming number. Resulting in a triple nested loop ensuring A is the smallest, B is second, and C is the largest of the three. \n\n\t Euler #10, finding the sum of all prime numbers below 2 million. This problem turned out to be rather easy, as a couple of the previous problems have dealth with prime numbers. Creating a function check for prime numbers, I then used a function that looped to the incoming depth number and conj all prime numbers along the way. To speed this up I was only going to the Sqrt of the number being checked and also passed the collection with all previous primes as a parameter to result in less numbers being checked.",
    date: "4-18-2025"
  },
  {
    title: "Iterate",
    blog: "\t Going back into old code is important at this stage I think. Taking a look at the koans again to re-visit some of the tougher concepts that I haven't yet used. Things that seem very important and I'm sure I will soon be utilizing, datatypes, macros, and multimethods. The koans are a great reference for these things and many more. I also spent time looking at my previous eulers and video notes. \n\n\t SOLID Components. Larger entities made up of many classes. This was a great lesson that did some re-iterating on the SOLID principles, as well as introduce some new concepts like Components, Subroutines, and Linkers. A Component is an independant deployable library. Subroutines vs Frameworks was illustrated by example saying that applications call subroutines, frameworks call applications. The historical evolution of linking. From slow linkers requiring a full rebuild to modern loaders capable of resolving references dynamically teaches why shared and dynamically linked libraries became less prominent as compilation techniques improved. The idea of navigating abstraction layers like a yo-yo encourages thoughtful layering and separation of concerns, starting from abstract actor-driven requirements and gradually descending into implementation specifics. \n\n\t Euler #11. Finding the 4 adjacent double digit numbers in any direction (left, right, up, down, diagonals). This was a much more intimidating problem on the surface. After getting the project open and dealing with the fact that the leading 0's will not be supported on numbers lke 08, I created a variable using a regex to remove them. Ultimately, this problem took a lot of testing and time thinking through my strategy. A strategy that I almost threw away before diving in. \n\n\t Using function for Horizontal, Vertical, Diagonal-up, and Diagonal-down, I am able to check the product of 4 positions ahead of a starting index and column (x, y). These are all set up very similarly in that they all find the proper column, drop to the starting index of that column, before reaching out in the proper direction and either taking 4 (horizontal) or incrementing or decrementing the column before starting the drop process over again. \n\n\t Now it was time to run a nested loop with all of these checks and using them to sort the output, giving me the largest product. This was a much larger project, code-wise than some of the previous eulers. I had a blast working through the problem and am thankful that Alex asked me to take on the challenge. \n\n\t Thankful to be solving problems with a great team!",
    date: "4-21-2025"
  },
     {
    title: "Zone of Pain ....or Uselessness?",
    blog: "\t What a phrase, the 'Zone of Pain'. But that's the life of a concrete component that carries many dependents. Such a place comes with many responsibilities, whereas the life of an abstract class or interface who no one depends upon. This opposition creates the ‘Zone of Uselessness’, which is not quite as fun to think about but equally important to understand. Today’s video information was packed full of new topics throughout the two major categories of Component Cohesion and Component Design. \n\n\t 'Avoid creating classes that depend on methods that they don't use. Avoid making components that depend on classes they don't use.' These two principles are eerily similar, are they not? The first pertaining to the Interface Segregation Principle and the second refering to the Common Reuse Principle. Both painting the same big picture in that you should not build a system with unused assets lying around wasting space. \n\n\t 'When someone changes something you depend upon. Make sure it hurts them more than it hurts you!' A beautifly spoken description of the Stable Dependency Principle by Uncle Bob. There was so much to take in today that I will certainly be revisiting my notes on these videos. \n\n\t After going through some previous eulers again as refreshers this morning I popped open OBS and recorded another fizzbuzz session. Test-Driven Development is a process that feels like is has swells of momentum. Using this idea when searching for the right song I happen to come accross a Beethoven symphony that I feel fit the rising and falling of the process. This was a fun project to set up and is now something I can watch myself and learn from. \n\n\t This was a fantastic week of being an apprentice. I knocked out so much that I really surprised myself. I'm feeling proud of the amount of work I accomplished, but I will not let that get over confident. There is so much ahead!",
    date: "4-22-2025"
  },
   {
    title: "Thrill rides",
    blog: "\t There is a moment that is so euphoric whenever a problem is solved through a new function or test is passed green. These are the moments that I strive for when coding, always learning a new way to do something. However, whenever the problem at hand is so close to being complete you can just smell it, and yet so far out of reach, this is an opposing feeling that we all dread I'm sure. Today I had that dreadful feeling, finding the highest divisible triangular number with over 500 divisors. \n\n\t Jumping into the problem and after stopping to think about all of the steps I might need to achieve this goal, I decided to start with counting how many divisors a number has. This was a simple process I thought and started out with a function that checks mod against a range all the way up to the number. Looking back I can easily see why this became an issue! Checking every number into the Millions becomes a costly afair, and this takes time. \n\n\t This problem was a simple concept that needed to be refactored after expanding my test numbers beyond the 100 divisors range.Eventually, after hours of thinking what I am missing and looking through how to increase the speed of a function using a range like this, I saw a hint about prime-factorization. This is a problem that seemed very simple, because I had done a prime-factor euler before, so, this should be a breeze. right? Well. Wanting to get a deeper understanding of what exactly prime-factorization even means, I went to Khan academy to gain some math skills. \n\n\t This was an interesting situation where I found myself with something that was working, just not to the extent that I needed. Realistically, I could have let my function run. Who knows how long it would have taken to reach the target number of 70 million and something. I'm happy to have learned the concept better, though. Learning like this can be painful in the moment, but usually results in a deeper understanding of the topic. \n\n\t Ready to take on Tic Tac Toe soon! Another great day of learning as an apprentice!",
    date: "4-23-2025"
  },
  {
    title: "Cracking the code",
    blog: "\t Who doesn't love the Roman's? They gave us so many great things like aquaducts, concrete, roads. But amazingly they also invented a number system that is really quite simple yet, elegant. Easy to understand and simple to write out. But how do we equate these to our numbers we use today? A problem I tackled today and learned some things along the way! \n\n\t This problem was fun to solve because so far in my problems I haven't had to use data from a map. Starting off, I went for a function that would calculate each number using a conditional and really thought I was on the right track for a minute there. Once I decided to test double digit numbers I quickly realized the error in my thinking. How would I calculate for subtractions with this method? It would have ended up much more complicated I believe, so I reset my thinking. What if I made a map and used it as a lookup table for the values of the incoming numerals! So I set off in this new direction which made finding the numbers easy. This was a promising result but I still had to solve the problem of, 'What if I need to subtract?'. Eventually after messing about in the code and trying various things, I wound up checking if the next index in the string's value is greater than the current value. This lead to a promising result, although in what felt like a messy way. I am proud to have solved this one and had fun learning the process. \n\n\t After completing the kata for the first time I decided to tackle the presentation for tomorrow's lunch and learn. Using my notes and going back into the video about the open-closed principle I came up with what I believe is a solid presentation showcasing the do's and do-not's of the principle itself. I am excited to get some feedback on the more traditional approach of presenting. \n\n\t A beautiful day of solving problems and growing my brain. I cannot wait to tackle tomorrow and make some bounds on tic-tac-toe!",
    date: "4-24-2025"
  },
  {
    title: "Learn and lunch",
    blog: "\t Exciting new challenges are heading my way! Digging deeper into tic-tac-toe has been a really fun and new way to look at clojure. I'm getting a lot of ideas on how to handle the state and am looking foward to having a finished project. The presentations today were really exciting! I feel like a received way better feedback than my first one, thats a great thing. Then getting to watch Nathan perform a rather exceptional kata was energizing. It made me want to get more confident in presenting things like that, I find myself rushing through the process where-as he really took his time. Following his performance, it was nice to see Nick's artistic passion really show today. I learned a bit about some art concepts that I hadn't heard be defined, but was such very nicely. \n\n\t Getting to have my mentor walk through his thought process about certain problems and ideas was also a great refresher of new ways to tackle problems. Getting to refactor eulers is really cool because it feels like my code just feels better after. I look forward to seeing my code start in these states! It was a great Friday and I plan on making progress on t-t-t a bit over the weekend if possible. ",
    date: "4-25-2025"
  },
    {
    title: "Minimax to the max!",
    blog: "\t Minimax is a fun algorithm that gets me thinking recursively about a problem. This time, I had to implement it in another language this time, having previously completed it in javascript. In my previous iterations of tic-tac-toe, I found myself using a 2-d array so that I could follow along with an 'x' and 'y'. This time I chose a single vector with each position being a vector itself carrying an empty string ['']. This could have been reduced again to just the str '' itself, however I wanted the extra brackets for the visuals in the termal ui. \n\n\t The game itself did indeed come together using the test-driven style. Starting off testing for a tie game to see if they are all filled and growing my tests to be specific to different parts of the minimax-ai solution, 'did someone make a winning move?', will the ai return a position? will that position be the current best position?' \n\n\t Accomplishing the task felt extremely gratifying, it was a problem that helped helped me grow a lot in iteration and recursion with clojure. I look forward to revisiting it and getting to refactor!",
    date: "4-28-2025"
  },
    {
    title: "Refactor, refactor!",
    blog: "\t Refactoring is all of the time, never ignore it. Never put it on a schedule. I need to recite this more often to myself as I am building out a solution. Follow the three laws of test-driven development, one: 'You're not allowed to write any production code until  you have a failing test.', two: 'Stop writing the test as soon as it fials, even if its a compiler error.', and finally 'Stop writing the production code as soon as the test passes.' These are essential to building out a solution incrementally without getting stuck in the mud. Play code golf and try to make a test pass with as few keystrokes as possible, have fun with the process. \n\n\t Getting to refactor with Alex has been eye-opening, yet again. As I am growing with clojure I am sure that these solutions will come to me easier, but as of now they are hard to see. When creating programs I need to search for more solutions that my typical javascript-way of doing things. Clojure can be clean and way more readable and I need to take advantage of that. \n\n\t Grateful to have gotten the help again today and thankful for my Mentor Alex!",
    date: "4-29-2025"
  },
    {
    title: "Getting the rythm",
    blog: "\t Coming out of my fifth Iterative meeting I am feeling more confident in my ability to complete tasks. I am working on my presentation for the Liskov Substitution Principle and am sort of struggling to come up with ideas that fully make sense for code examples. I want my presentations to have some sort of new way to visualize the problem at least and not just the same old examples that I'm sure all of the craftsman have seen from every new apprenctice. \n\n\t Getting to improve my tic-tac-toe is an exciting story for the week, I look forward to having a fully working game with playable options. I will need to work on my kata a lot tomorrow because I got so caught up in the presentation that I did not jump into that yet. Building minimax again in clojure was a challenge in itself, but now building upon that idea will be easier since I now have a much better grasp of using recursion in the language. \n\n\t Tomorrow I will work hard to complete this and at least two other tasks for my week. ",
    date: "4-30-2025"
  },
    {
    title: "Clean Tests",
    blog: "\t Testing a problem out is becoming a go to habit when looking at a problem now and that's great. When it comes to implementing these tests I am definitely in need of practice. The building of tests with multiple layers of set up functions is still a big concept for my tiny testing brain. But as Uncle Bob tells us, start small with a degenerate test and a problem to solve, incrementaly work you way towards the goal one green test at a time. \n\n\t Arrange, Act, Assert! Well, that was the way. Then along comes another A! Annihilate, or to destroy the left over effects of a test. I'm happy to learning more about the ideas of creating useful and modular testing and look forward to being a master at utilizing them. Using transient fresh fixtures whenever possible, and keeping teardowns to a minimum. ",
    date: "5-1-2025"
  },
    {
    title: "Liftoff with Liskov!",
    blog: "\t The Liskov substitution principle was for some odd reason what felt like an intimidating concept on the surface. Maybe it was just because there was two whole videos on the subject in the SOLID series with Uncle Bob. However once I had dug into the topic and got a fuller understanding on the idea did I come to see it for what it is. Making sure that all of your extensions from a type or class are fully committed to fulfilling to contract that it has taken on by extending off of the original class. Not breaking the expectation of what a system is expecting from a function. Being consistent with your types and returns. \n\n\t Bowling has become a much more comfortable process. A short program that consists of a few if statements and a loop to tally the score of a given list of rolls. The roll-many function that is used to test a given list of input vectors with rolls and pins got way over complicated my first go through. Trying to create a loop system looking through each vector and keeping track of things in a recursive way. After slowing down to consider the problem and what I really needed, I realized the repeat function that I used to initiate the first set of rolls (20 0) was the key! I could go through a list of vectors with a for loop and create sub sequences with the first amount of the second value, within each given vector. example being [[20 0]] would give us 20 0's, as before. But we can now enhance and build fuller games with this system such as [[15 1] [5 2]] can result in a game of 25 from adding fifteen 1's and five 2's. This can be fully utilized by flattening the output of the for and using this for score-game. \n\n\t Thankful for the help refactoring again today and look forward to showing projects where I have done the refactoring first, because I see those things while building it. A great day of presenting and getting feedback. Grateful for another week!",
    date: "5-2-2025"
  },
    // {
  //   title: "",
  //   blog: "\t ",
  //   date: "-2025"
  // },
]

export default blogPosts

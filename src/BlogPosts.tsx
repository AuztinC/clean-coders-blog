const blogPosts = [
  {title: "Day One - Blast Off!",
    blog: "\tThis is my first blog post. Today I learned about a lot of tools that I will use to be successful at Clean Coders. Tuple, CC-Epic, and CC-Poker. I used Tuple to partner with my mentor Alex where we discussed the process of estimating jobs and features.\n\n\tAfter deploying this blog site, I will proceed to setup the environment on the Mac Mini that he has provided me as well as watch the first video if time permits! The Mac Mini is set up with the proper environment for the clojure koans and the first few koans are complete.",
    date: "4-1-2025"
  },
  {title: "Day Two - Diving in",
    blog: "\tKoans! Today I did Koans 7 - 20. Going back through the Koans a second time has been a great refresher. I got stuck on a couple of the problems but proceeded to use the lein REPL to evaluate expressions and figure out my answers. Taking deeper dives into some of the key functions I learned the power of 'Let' to bind data structures to symbols. This is great way to destructure a datatype. 'Ref' will help us create a mutable object which I imagine could be great for managing things like state. ",
    date: "4-2-2025"
  },
  {title: "Day Three - Taking a closer look",
    blog: "\tThere is no shortage of information to be learned! After pushing through a couple of more Koans, I met with Alex J and understand some of the Koans I had earlier got to pass but didn't fully understand why. I now understand meta data a bit better, The ability to attach underlying data to an object. I found myself going into docs today to read more about some Clojure functions (seq vs sequence, meta, vary-meta, and more).\n\n\t Alex Root popped in to say welcome, which was very appreciated and made me feel like a part of the team even more! Macros are confusing. After spending some time trying to understand where I was going wrong I again asked for some help and got clarification on the 'recursive-infix' problem within macros. After restructuring the macro being create I was lead to find a further use for the 'drop' function as well as nthrest(the ability to take the end of a form starting at a certain index). \n\n\t Koans are complete although I will be scouring back through them in due time. Multimethods are very useful, similar to 'method overloading' in c#; This gives us the ability to have different outputs from the same function based on the inputing parameters.",
    date: "4-3-2025"
  },
  {title: "Day Four - A task for the Tin Man",
    blog: "\tHow would one go about grouping the frequency in which an element occurs within a given collection? ChatGPT thought this would be a great practice lesson for me to solve, so I dove right in. While trying to use my wits and ability to problem solve, I came up with a conclusion that I thought was genius! \n\n\t 'Using Reduce and Assoc I can see if each element exists within the accumulator and update that keys value with Inc. This process took my a while of looking through docs and trying different map functions like Update.' This is when Alex jumped in to kick off the Euler project, and after showing him my progress he was happy to lead me to a function in the docs called Frequencies!.. This function is amazing for this exact task! \n\n\t The process of building the frequencies function is still an important one to understand, though, and so I am excited to be able to build functions like these from scratch. \n\n\t Euler 1 began with me having to fully understand Modulo(the Quotient of the init value by the given Mod), which I had only used briefly in the past to check for odd or even numbers. After helping me understand this concept fully, Alex lead me through my first use of TDD. We wrote some practice tests that helped with the Modulo practice before we took a break for Lunch and Learn. After games with the team, I went back to finish this Euler alone as Alex had become busy. Solving this problem felt really great! I found Kristi in the clubhouse and got great help from her on how to submit my answers for Eulers and also getting the next problem started. \n\n\t Towards the end of the day, Alex suggested that I might begin watching through the videos, and so I finished the first video as well as exam. \n\n\t It was a fantastic first week working with the Clean Coders team! I have been made to feel like a part of the team right away and I am grateful for that. ",
    date: "4-4-2025"
  },
  {title: "Figuring it out",
      blog: "\tThe ability to precisely and accurately manage data within maps and vectors is slowly becoming more clear. The problem of grouping-frequencies was stepped up by the sum of the fibonacci sequence, followed by the largest prime factor of what might be the biggest number I've ever seen. Starting, I got some base case tests and examples of loop vs having a function call itself in the stack from Alex. \n\n\t Using some powerful wizardry called recursion with a loop to set our collection and add to it while using fancy tools like last and butlast to get our last two numbers in the collection. Once these two numbers are added the result can be compared with our incoming 'n' value to see if we have reached our max value where it is ultimately filtered for the even numbers and then reduced with +. \n\n\t The largest prime factor; sweet and simple, right? I started this problem alone and was slightly nervous about that. Choosing to separate out my functions, I began with factors alone. Base case is the game, get something running. After getting a simple 2 to pass through and struggling to gain movement forward. Eventually I stumbled upon a winning result, using a range to our n value and filtering any (mod n incrementing-number) that equal zero?; we get our factors which we can then run through the prime? function to filter any prime numbers. Both of these functions had to be refactored by using Math/sqrt n on our respective ranges. \n\n\t Ending the day; I completed episode 2 and 3 of the clean coders videos. Also completing two more ChatGPT practice problems, the group-by-fn, finishing filter-duplicates, and a quick flip-map. Big day, many more to come.",
      date: "4-7-2025"
  },
  {title: "A day with Uncle Bob",
      blog: "\t Function names matter, and should be no longer than around 4 lines. Something I have felt myself wondering in the past, have my function names been descriptive enough? Probably not, when I reflect back and think about some of the projects where I was in a hurry to get my idea out and didn't want to be slowed down by writing out long names that would have helped anyone ready my code if ever they chose to. Even I myself would have benefited from this simply by knowing that I could go back and immediately understand what I was trying to accomplish within a function. \n\n\t Uncle Bob doesn't much care for comments. The idea is a sound one, your code should speak for itself and when someone reads it, there should not be a confusion based on function and variable names, and the flow of logic. Using white-space properly is something I have tried to keep consistent throughout my projects. Using only 1 space is Bob's convention, which I think is a reasonable one. \n\n\t Avoiding temporal coupling by passing a block. Tell, don't ask, as to avoid long chain calls from functions that should be seperated out. Keeping a file at around 60 lines of code and at most 100 to 120 to ensure clear intent and workflow. These and so many other concepts today really gave me a lot to think about when I'm writing my next lines of code. \n\n\t All of this learning, and getting to watch Uncle Bob do clean-up on these projects and complete the stack kata was a great bonus for todays lessons.",
      date: "4-8-2025"
  },
  {title: "If you plan it, they will meet.",
      blog: "\t Today was my first iterative planning meeting or IPM. I am happy to have a better understanding of what my weekly duties will be at least at this current level of the apprenticeship. Having to estimate is very hard and can be intimidating while doing so in front of multiple people. A feeling I will have to overcome and get confident in answering. The first week I feel I ended fairly strong. I will be proud, but aware that harder tasks are coming. \n\n\t My first task became retaking some of the exams for the videos. While not being directly given a strict goal, I should have not had to go back to fix anything. That task is nearly complete already having only one more exam to fix in the morning first thing. I am actually glad I had to go back though becuase it gave me another opportunity to absorb the information in the videos. Getting to refresh things like how to remove switch statements from your code using polymorphic dispatch and create less dependancy issues due to fan-out, a little bit about Functional and Structured programming and what they are used for, and many other great lessons. \n\n\t Tomorrow I am excited to finish off the previous exams and get started on the TDD videos after I complete the FizzBuzz Kata for the first time. Having to 'Live Perform' the kata is an interested and sort of scary one for me. However, Micah is right in that I should be so confident by a week of completing the task multiple times daily that it should be no problem to talk it out and explain each step in detail. \n\n\t Thrilled to be an apprentice, learning from some really smart and helpful people. ",
      date: "4-9-2025"
  },
  {title: "The Legend Himself",
    blog: "\t The first Kata I was assigned was a fun challenge. The ability to print a string with 'fizz' and 'buzz' at every 3 and 5 multiple, and 'fizzbuzz' if the number is both. I succefully completed it twice today while still managing to go through some old exams as well as complete the first TDD video. Fizzbuzz is a good first challenge for a cata. A problem that allowed me to use something new, both 'doseq' and 'cond'. Using cond we are able to check if an incoming number will be a multiple of 3, 5, or both. This is accomplished using Mod which I have been getting more comfortable with these past few days. \n\n\t Begenning by seperating out the functionality of the question; I created a function to handle each number individually to check for 'fizz' 'buzz' or 'fizzbuzz'. This is the function using Mod to check for divisibility. Next the function for outputting a list of numbers with the strings was created. This function mapped a range of 1 to the (inc c) to allow each number to feed into fizzbuzz and return their value as a list. Finally the function to print the string is created, this function uses a doseq to println the result of each value of fizzbuzz-upto. \n\n\t I'm eager to master the process of TDD and know what to be testing for and when. The repitition of the Kata is a fantastic way to get me used to writing them so I look forward to that comfort. \n\n\t Getting to watch a presentation live from Uncle Bob was really a special treat for the day. His ability to relate things and tie topics together is very inpspiring for my future presentations. Learning about the human body a bit was a great break during my day, and a great refresher for my science knowledgebase. \n\n\t Watching Alex present about TDD and go over some concept projects was also great! A good way to see some realistic case studies of projects and the way the tests are used for the current craftsmen. Grateful for another day of apprenticeship.",
    date: "4-10-2025"
  },
  {title: "Repition, young grasshopper",
    blog: "\t Fizzbuzz is definitely on the brain. It is a fun challenge that I like to totally erase from memory before attempting again if possible. I am able to think the problem through and make my way through each test successfully. Knowing what you want out of a function ahead of time can make the process of testing feel a little redundent, but once you have them in place it is nice to not wonder if the function will break. From using terminal to create the project and open IntelliJ to printing out the final output with lein run -m, I am getting confident in the process. \n\n\t I am happy to have the repitition as a task. While I have been doing practice problems on my own, it helps to a reason to make the project, use the tools, run the tests and commands. After watching and completing another couple videos and exams I am becoming a more well equipped designer and developer. Many lessons that included information like Architecture and the importance of laying out the foundation of a software system, Developing apps driven by independent use-cases, and the disgust of design smells due to fragility, rigidity, and needless complexity. These and many others today involving the importance of interface segregation, the Single Use Principle, and the Dependancy Inversion Principle are huge take-aways for me today. I will be studying these lessons before designing my next system.",
    date: "4-11-2025"
  },
  {title: "Racecar, Level, Rotor, Oh My!",
    blog: "\t Using the knowledge I have gained through the videos and my Mentor thus far. I was able to successfully use Test-Driven Development strategies and solve the problem. The question of 'What is the largest palindrome of two three digit numbers?' was not answered without a set of challenges. \n\n\t Going into the problem I knew I wanted to seperate the operations to build to my final answer. Beginning with a simple function to find the product. Once the numbers are multiplied, they need to be seperated out so that they can be compared to one another. I solved this with a function that splits a string version of the numbers into a vector. \n\n\t Now I have a collection something like ['9' '0' '0' '9'], and with this I will need to determine the amount of numbers in the collection to know where I should split it correctly. A cond with a 4, 5, and 6 variation of a collection with two subvectors, reversing the second half to compare and check for a match with the first. \n\n\t Next a simple function checks if every subvector is matching in our collection using every? true? over our subvec-coll. Thus bringing us to our final step, the grand finale. I was feelng good with my progress after working through a loop that will recursively dec the first int in the num-col before sending it off to get processed and match-checked. This resulted in a green light from my two digit test case, expecting and achieving my result of 9009 from the product of 91 x 99. \n\n\t However. This process did not continue to produce the results I expected when I stepped the function up to a two digit number. I was, after all, looking for the largest product of a three digit number, not two! And so, began my testing. I first had to improve my ability to process the string splitting and reversing which could at first only handle a 4 digit number, due to my expected results of the two digit outcome. \n\n\t In the end, a double nested for loop was used to create essentially a couple countdown timers and a max(outer) and local(inner) palindrome to compare with. Down in the depths we recurse over the inner countdown doing palindrome checks all along the way, and updating our local-max-palindrome. Once the timer is out for both we will result in an output format of [[993 913] 906609]",
    date: "4-14-2025"
  },
  {title: "Re-factor",
    blog: "\t What makes something solid? The ability to resist change from outside forces? Maybe something that is independent and can stand alone or can be relied upon? Well, these seem like good values to instil in the design of our applications, don't they? The SOLID principles help define a design structure that if used will certainly help you get close to having most if not all parts of your application following these and many other great values. \n\n\t Single Responsibility, or the principle that states that each module you build should have one and only one responsibility, and it should do that well. This is a fantastic way to build modules. By keeping all modules small and easy to understand we can decouple complicated logic and remove the overflow of un-needed resources or un-called functions. This principle alone leads you to an easy path to conforming to the Interface Segregation principle. \n\n\t Open-Closed Principle, the rule that asks that your modules each have only the ability to be extended and not modified. When you are building modules that follow this principle, your modules behavior should be easy to change, while the source code of that module should not need modification. When you add a new feature to a system you should only have to add new code to the project, not go in and modify much of the existing source code. Building a system that isn't following this rule must be a real challenge. \n\n\t Barbara Liskov wrote us a great list of rules that were later coined by Alan Coplien as the Liskov Substitution Principle. The idea that a subtype in a system should be able to be substituded in place of its parent and produce the same outcome. Any class that we extend from another should be able to sit in place of the original. If a base clase does something, any derivitive should do that also. Any derived class should be able to do more than the base class and not less. \n\n\t The Interface Segregation Principle tells us that a class should not be forced to implement interfaces it does not need. This is huge for keeping a system decoupled and less cluttered overall. \n\n\t Details should depend on high level policies while high level policies should never depends on the details of a system. The Dependency Inversion Principl separates extensible behavior behind abstract interface and then turn the dependancies around. This keeps us abstracting our policies out from the main applicaion and keeps business logic seperate from low level details. \n\n\t After two hours of refactoring with Alex today, my Euler 4 or the fizzbuzz project code is looking WAY cleaner. The names, functions, tests are all improved! It was an extremely enlightening to see the power of some of clojures built in functins like for. I was shocked to see the simplicity of a recuring double for loops inside of a simple binding expression and printout. Changing names to be somehow what seems to be more simple and also descriptive was another take-away that I will keep with me. \n\n\t A ton of lessons today and I'm happy to be getting them. Another great day of being an apprentice!",
    date: "4-15-2025"
  },
  
]

export default blogPosts
